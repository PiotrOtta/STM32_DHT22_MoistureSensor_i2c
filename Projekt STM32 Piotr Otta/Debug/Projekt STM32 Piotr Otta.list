
Projekt STM32 Piotr Otta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800309c  0800309c  0001309c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800317c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000130  20000070  080031ec  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001a0  080031ec  000201a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010ce2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002605  00000000  00000000  00030d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007c9b  00000000  00000000  00033387  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a28  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d50  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006e73  00000000  00000000  0003c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004026  00000000  00000000  00043613  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00047639  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000022d0  00000000  00000000  000476b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003084 	.word	0x08003084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003084 	.word	0x08003084

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b97a 	b.w	8000dc0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	468c      	mov	ip, r1
 8000aea:	460d      	mov	r5, r1
 8000aec:	4604      	mov	r4, r0
 8000aee:	9e08      	ldr	r6, [sp, #32]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d151      	bne.n	8000b98 <__udivmoddi4+0xb4>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d96d      	bls.n	8000bd6 <__udivmoddi4+0xf2>
 8000afa:	fab2 fe82 	clz	lr, r2
 8000afe:	f1be 0f00 	cmp.w	lr, #0
 8000b02:	d00b      	beq.n	8000b1c <__udivmoddi4+0x38>
 8000b04:	f1ce 0c20 	rsb	ip, lr, #32
 8000b08:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b14:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b18:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b1c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b20:	0c25      	lsrs	r5, r4, #16
 8000b22:	fbbc f8fa 	udiv	r8, ip, sl
 8000b26:	fa1f f987 	uxth.w	r9, r7
 8000b2a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b2e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b32:	fb08 f309 	mul.w	r3, r8, r9
 8000b36:	42ab      	cmp	r3, r5
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x6c>
 8000b3a:	19ed      	adds	r5, r5, r7
 8000b3c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b40:	f080 8123 	bcs.w	8000d8a <__udivmoddi4+0x2a6>
 8000b44:	42ab      	cmp	r3, r5
 8000b46:	f240 8120 	bls.w	8000d8a <__udivmoddi4+0x2a6>
 8000b4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4e:	443d      	add	r5, r7
 8000b50:	1aed      	subs	r5, r5, r3
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b58:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b60:	fb00 f909 	mul.w	r9, r0, r9
 8000b64:	45a1      	cmp	r9, r4
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x98>
 8000b68:	19e4      	adds	r4, r4, r7
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	f080 810a 	bcs.w	8000d86 <__udivmoddi4+0x2a2>
 8000b72:	45a1      	cmp	r9, r4
 8000b74:	f240 8107 	bls.w	8000d86 <__udivmoddi4+0x2a2>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	eba4 0409 	sub.w	r4, r4, r9
 8000b80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b84:	2100      	movs	r1, #0
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d061      	beq.n	8000c4e <__udivmoddi4+0x16a>
 8000b8a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b8e:	2300      	movs	r3, #0
 8000b90:	6034      	str	r4, [r6, #0]
 8000b92:	6073      	str	r3, [r6, #4]
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d907      	bls.n	8000bac <__udivmoddi4+0xc8>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d054      	beq.n	8000c4a <__udivmoddi4+0x166>
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	fab3 f183 	clz	r1, r3
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	f040 808e 	bne.w	8000cd2 <__udivmoddi4+0x1ee>
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xdc>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80fa 	bhi.w	8000db4 <__udivmoddi4+0x2d0>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb65 0503 	sbc.w	r5, r5, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	46ac      	mov	ip, r5
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d03f      	beq.n	8000c4e <__udivmoddi4+0x16a>
 8000bce:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	b912      	cbnz	r2, 8000bde <__udivmoddi4+0xfa>
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bde:	fab7 fe87 	clz	lr, r7
 8000be2:	f1be 0f00 	cmp.w	lr, #0
 8000be6:	d134      	bne.n	8000c52 <__udivmoddi4+0x16e>
 8000be8:	1beb      	subs	r3, r5, r7
 8000bea:	0c3a      	lsrs	r2, r7, #16
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bf6:	0c25      	lsrs	r5, r4, #16
 8000bf8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bfc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c00:	fb0c f308 	mul.w	r3, ip, r8
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x134>
 8000c08:	19ed      	adds	r5, r5, r7
 8000c0a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x132>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	f200 80d1 	bhi.w	8000db8 <__udivmoddi4+0x2d4>
 8000c16:	4680      	mov	r8, r0
 8000c18:	1aed      	subs	r5, r5, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c20:	fb02 5510 	mls	r5, r2, r0, r5
 8000c24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c28:	fb0c fc00 	mul.w	ip, ip, r0
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x15c>
 8000c30:	19e4      	adds	r4, r4, r7
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x15a>
 8000c38:	45a4      	cmp	ip, r4
 8000c3a:	f200 80b8 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 040c 	sub.w	r4, r4, ip
 8000c44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c48:	e79d      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	f1ce 0420 	rsb	r4, lr, #32
 8000c56:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c5e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c62:	0c3a      	lsrs	r2, r7, #16
 8000c64:	fa25 f404 	lsr.w	r4, r5, r4
 8000c68:	ea48 0803 	orr.w	r8, r8, r3
 8000c6c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c70:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c74:	fb02 4411 	mls	r4, r2, r1, r4
 8000c78:	fa1f fc87 	uxth.w	ip, r7
 8000c7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c80:	fb01 f30c 	mul.w	r3, r1, ip
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x1bc>
 8000c8c:	19ed      	adds	r5, r5, r7
 8000c8e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c92:	f080 808a 	bcs.w	8000daa <__udivmoddi4+0x2c6>
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	f240 8087 	bls.w	8000daa <__udivmoddi4+0x2c6>
 8000c9c:	3902      	subs	r1, #2
 8000c9e:	443d      	add	r5, r7
 8000ca0:	1aeb      	subs	r3, r5, r3
 8000ca2:	fa1f f588 	uxth.w	r5, r8
 8000ca6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000caa:	fb02 3310 	mls	r3, r2, r0, r3
 8000cae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cb2:	fb00 f30c 	mul.w	r3, r0, ip
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x1e6>
 8000cba:	19ed      	adds	r5, r5, r7
 8000cbc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc0:	d26f      	bcs.n	8000da2 <__udivmoddi4+0x2be>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0x2be>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	443d      	add	r5, r7
 8000cca:	1aeb      	subs	r3, r5, r3
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	e78f      	b.n	8000bf2 <__udivmoddi4+0x10e>
 8000cd2:	f1c1 0720 	rsb	r7, r1, #32
 8000cd6:	fa22 f807 	lsr.w	r8, r2, r7
 8000cda:	408b      	lsls	r3, r1
 8000cdc:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce0:	ea48 0303 	orr.w	r3, r8, r3
 8000ce4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ce8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cf2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cf6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cfa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cfe:	fa1f f883 	uxth.w	r8, r3
 8000d02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d06:	fb09 f408 	mul.w	r4, r9, r8
 8000d0a:	42ac      	cmp	r4, r5
 8000d0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d10:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x244>
 8000d16:	18ed      	adds	r5, r5, r3
 8000d18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d1c:	d243      	bcs.n	8000da6 <__udivmoddi4+0x2c2>
 8000d1e:	42ac      	cmp	r4, r5
 8000d20:	d941      	bls.n	8000da6 <__udivmoddi4+0x2c2>
 8000d22:	f1a9 0902 	sub.w	r9, r9, #2
 8000d26:	441d      	add	r5, r3
 8000d28:	1b2d      	subs	r5, r5, r4
 8000d2a:	fa1f fe8e 	uxth.w	lr, lr
 8000d2e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d32:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d3a:	fb00 f808 	mul.w	r8, r0, r8
 8000d3e:	45a0      	cmp	r8, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x26e>
 8000d42:	18e4      	adds	r4, r4, r3
 8000d44:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d48:	d229      	bcs.n	8000d9e <__udivmoddi4+0x2ba>
 8000d4a:	45a0      	cmp	r8, r4
 8000d4c:	d927      	bls.n	8000d9e <__udivmoddi4+0x2ba>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	441c      	add	r4, r3
 8000d52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d56:	eba4 0408 	sub.w	r4, r4, r8
 8000d5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5e:	454c      	cmp	r4, r9
 8000d60:	46c6      	mov	lr, r8
 8000d62:	464d      	mov	r5, r9
 8000d64:	d315      	bcc.n	8000d92 <__udivmoddi4+0x2ae>
 8000d66:	d012      	beq.n	8000d8e <__udivmoddi4+0x2aa>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x29c>
 8000d6a:	ebba 030e 	subs.w	r3, sl, lr
 8000d6e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431f      	orrs	r7, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	6037      	str	r7, [r6, #0]
 8000d7e:	6074      	str	r4, [r6, #4]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	4618      	mov	r0, r3
 8000d88:	e6f8      	b.n	8000b7c <__udivmoddi4+0x98>
 8000d8a:	4690      	mov	r8, r2
 8000d8c:	e6e0      	b.n	8000b50 <__udivmoddi4+0x6c>
 8000d8e:	45c2      	cmp	sl, r8
 8000d90:	d2ea      	bcs.n	8000d68 <__udivmoddi4+0x284>
 8000d92:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d96:	eb69 0503 	sbc.w	r5, r9, r3
 8000d9a:	3801      	subs	r0, #1
 8000d9c:	e7e4      	b.n	8000d68 <__udivmoddi4+0x284>
 8000d9e:	4628      	mov	r0, r5
 8000da0:	e7d7      	b.n	8000d52 <__udivmoddi4+0x26e>
 8000da2:	4640      	mov	r0, r8
 8000da4:	e791      	b.n	8000cca <__udivmoddi4+0x1e6>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e7be      	b.n	8000d28 <__udivmoddi4+0x244>
 8000daa:	4601      	mov	r1, r0
 8000dac:	e778      	b.n	8000ca0 <__udivmoddi4+0x1bc>
 8000dae:	3802      	subs	r0, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	e745      	b.n	8000c40 <__udivmoddi4+0x15c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e708      	b.n	8000bca <__udivmoddi4+0xe6>
 8000db8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbc:	443d      	add	r5, r7
 8000dbe:	e72b      	b.n	8000c18 <__udivmoddi4+0x134>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_InitTick+0x3c>)
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_InitTick+0x40>)
{
 8000dca:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	7818      	ldrb	r0, [r3, #0]
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dd6:	6810      	ldr	r0, [r2, #0]
 8000dd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ddc:	f000 fa48 	bl	8001270 <HAL_SYSTICK_Config>
 8000de0:	4604      	mov	r4, r0
 8000de2:	b958      	cbnz	r0, 8000dfc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de4:	2d0f      	cmp	r5, #15
 8000de6:	d809      	bhi.n	8000dfc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	4602      	mov	r2, r0
 8000dea:	4629      	mov	r1, r5
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 fa0a 	bl	8001208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_InitTick+0x44>)
 8000df6:	4620      	mov	r0, r4
 8000df8:	601d      	str	r5, [r3, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_Init>:
{
 8000e0c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x30>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e26:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f9db 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ffc8 	bl	8000dc4 <HAL_InitTick>
  HAL_MspInit();
 8000e34:	f001 fc46 	bl	80026c4 <HAL_MspInit>
}
 8000e38:	2000      	movs	r0, #0
 8000e3a:	bd08      	pop	{r3, pc}
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x10>)
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_IncTick+0x14>)
 8000e44:	6811      	ldr	r1, [r2, #0]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	440b      	add	r3, r1
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200000ac 	.word	0x200000ac
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_GetTick+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000ac 	.word	0x200000ac

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff6 	bl	8000e58 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	bf1c      	itt	ne
 8000e70:	4b05      	ldrne	r3, [pc, #20]	; (8000e88 <HAL_Delay+0x24>)
 8000e72:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e76:	bf18      	it	ne
 8000e78:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	f7ff ffed 	bl	8000e58 <HAL_GetTick>
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	4284      	cmp	r4, r0
 8000e82:	d8fa      	bhi.n	8000e7a <HAL_Delay+0x16>
  {
  }
}
 8000e84:	bd38      	pop	{r3, r4, r5, pc}
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000

08000e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e8e:	4604      	mov	r4, r0
 8000e90:	2800      	cmp	r0, #0
 8000e92:	f000 809b 	beq.w	8000fcc <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e96:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000e98:	b925      	cbnz	r5, 8000ea4 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	f001 f863 	bl	8001f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9e:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ea0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea6:	06db      	lsls	r3, r3, #27
 8000ea8:	f100 808e 	bmi.w	8000fc8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eb2:	f023 0302 	bic.w	r3, r3, #2
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ebc:	4b44      	ldr	r3, [pc, #272]	; (8000fd0 <HAL_ADC_Init+0x144>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ec4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	6861      	ldr	r1, [r4, #4]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ece:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ed0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ee0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ee2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ee4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ee6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000eea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ef2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ef4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f02:	4934      	ldr	r1, [pc, #208]	; (8000fd4 <HAL_ADC_Init+0x148>)
 8000f04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f06:	428a      	cmp	r2, r1
 8000f08:	d052      	beq.n	8000fb0 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f0a:	6899      	ldr	r1, [r3, #8]
 8000f0c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000f10:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f12:	6899      	ldr	r1, [r3, #8]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f18:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f26:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f28:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f2a:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f2c:	f022 0202 	bic.w	r2, r2, #2
 8000f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f3a:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d03e      	beq.n	8000fc0 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f42:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f44:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	3901      	subs	r1, #1
 8000f58:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f5c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f60:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6a:	3901      	subs	r1, #1
 8000f6c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f72:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f74:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000f84:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f86:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f88:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f90:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f92:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f94:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000f98:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fbe:	e7b2      	b.n	8000f26 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fc6:	e7c9      	b.n	8000f5c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
 8000fca:	e7ed      	b.n	8000fa8 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
}
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	40012300 	.word	0x40012300
 8000fd4:	0f000001 	.word	0x0f000001

08000fd8 <HAL_ADC_Start>:
{
 8000fd8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000fde:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d04e      	beq.n	8001084 <HAL_ADC_Start+0xac>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fec:	6803      	ldr	r3, [r0, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	07d1      	lsls	r1, r2, #31
 8000ff2:	d505      	bpl.n	8001000 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	07d2      	lsls	r2, r2, #31
 8000ff8:	d414      	bmi.n	8001024 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
}
 8000ffc:	b002      	add	sp, #8
 8000ffe:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001000:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001002:	4921      	ldr	r1, [pc, #132]	; (8001088 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800100a:	4a20      	ldr	r2, [pc, #128]	; (800108c <HAL_ADC_Start+0xb4>)
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001012:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8001016:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8001018:	9a01      	ldr	r2, [sp, #4]
 800101a:	2a00      	cmp	r2, #0
 800101c:	d0ea      	beq.n	8000ff4 <HAL_ADC_Start+0x1c>
      counter--;
 800101e:	9a01      	ldr	r2, [sp, #4]
 8001020:	3a01      	subs	r2, #1
 8001022:	e7f8      	b.n	8001016 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001032:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001038:	bf41      	itttt	mi
 800103a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800103c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001040:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001044:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001046:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800104c:	bf1c      	itt	ne
 800104e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001050:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001054:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001056:	2200      	movs	r2, #0
 8001058:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800105c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001060:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_ADC_Start+0xb8>)
 8001064:	6852      	ldr	r2, [r2, #4]
 8001066:	06d2      	lsls	r2, r2, #27
 8001068:	d108      	bne.n	800107c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800106a:	6898      	ldr	r0, [r3, #8]
 800106c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001070:	d1c3      	bne.n	8000ffa <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	e7bf      	b.n	8000ffc <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_ADC_Start+0xbc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d1bb      	bne.n	8000ffa <HAL_ADC_Start+0x22>
 8001082:	e7f2      	b.n	800106a <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8001084:	2002      	movs	r0, #2
 8001086:	e7b9      	b.n	8000ffc <HAL_ADC_Start+0x24>
 8001088:	000f4240 	.word	0x000f4240
 800108c:	20000008 	.word	0x20000008
 8001090:	40012300 	.word	0x40012300
 8001094:	40012000 	.word	0x40012000

08001098 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001098:	6803      	ldr	r3, [r0, #0]
 800109a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_ADC_ConfigChannel>:
{
 80010a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d06e      	beq.n	800118c <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010ae:	680d      	ldr	r5, [r1, #0]
 80010b0:	6804      	ldr	r4, [r0, #0]
 80010b2:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80010b4:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010b6:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80010b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80010bc:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010be:	d92a      	bls.n	8001116 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80010c4:	68e7      	ldr	r7, [r4, #12]
 80010c6:	3b1e      	subs	r3, #30
 80010c8:	f04f 0e07 	mov.w	lr, #7
 80010cc:	fa0e fe03 	lsl.w	lr, lr, r3
 80010d0:	ea27 070e 	bic.w	r7, r7, lr
 80010d4:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010d6:	68e7      	ldr	r7, [r4, #12]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	433b      	orrs	r3, r7
 80010de:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80010e0:	684a      	ldr	r2, [r1, #4]
 80010e2:	2a06      	cmp	r2, #6
 80010e4:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80010e8:	d825      	bhi.n	8001136 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ea:	4413      	add	r3, r2
 80010ec:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80010ee:	1f59      	subs	r1, r3, #5
 80010f0:	231f      	movs	r3, #31
 80010f2:	408b      	lsls	r3, r1
 80010f4:	ea27 0303 	bic.w	r3, r7, r3
 80010f8:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80010fc:	fa06 f101 	lsl.w	r1, r6, r1
 8001100:	4311      	orrs	r1, r2
 8001102:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_ADC_ConfigChannel+0x130>)
 8001106:	429c      	cmp	r4, r3
 8001108:	d034      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800110a:	2300      	movs	r3, #0
 800110c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001110:	4618      	mov	r0, r3
}
 8001112:	b003      	add	sp, #12
 8001114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001116:	6927      	ldr	r7, [r4, #16]
 8001118:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800111c:	f04f 0e07 	mov.w	lr, #7
 8001120:	fa0e fe03 	lsl.w	lr, lr, r3
 8001124:	ea27 070e 	bic.w	r7, r7, lr
 8001128:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800112a:	6927      	ldr	r7, [r4, #16]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	433b      	orrs	r3, r7
 8001132:	6123      	str	r3, [r4, #16]
 8001134:	e7d4      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001136:	2a0c      	cmp	r2, #12
 8001138:	d80e      	bhi.n	8001158 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800113a:	4413      	add	r3, r2
 800113c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800113e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001142:	231f      	movs	r3, #31
 8001144:	4093      	lsls	r3, r2
 8001146:	ea21 0303 	bic.w	r3, r1, r3
 800114a:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800114c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800114e:	fa06 f202 	lsl.w	r2, r6, r2
 8001152:	431a      	orrs	r2, r3
 8001154:	6322      	str	r2, [r4, #48]	; 0x30
 8001156:	e7d5      	b.n	8001104 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001158:	4413      	add	r3, r2
 800115a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800115c:	3b41      	subs	r3, #65	; 0x41
 800115e:	221f      	movs	r2, #31
 8001160:	409a      	lsls	r2, r3
 8001162:	ea21 0202 	bic.w	r2, r1, r2
 8001166:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800116a:	fa06 f103 	lsl.w	r1, r6, r3
 800116e:	4311      	orrs	r1, r2
 8001170:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001172:	e7c7      	b.n	8001104 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001174:	2d12      	cmp	r5, #18
 8001176:	d10b      	bne.n	8001190 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_ConfigChannel+0x134>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001180:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	e7be      	b.n	800110a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800118c:	2002      	movs	r0, #2
 800118e:	e7c0      	b.n	8001112 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_ConfigChannel+0x138>)
 8001192:	429d      	cmp	r5, r3
 8001194:	d001      	beq.n	800119a <HAL_ADC_ConfigChannel+0xfa>
 8001196:	2d11      	cmp	r5, #17
 8001198:	d1b7      	bne.n	800110a <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_ADC_ConfigChannel+0x134>)
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80011a2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011aa:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_ADC_ConfigChannel+0x138>)
 80011ae:	429d      	cmp	r5, r3
 80011b0:	d1ab      	bne.n	800110a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_ADC_ConfigChannel+0x13c>)
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_ConfigChannel+0x140>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80011bc:	230a      	movs	r3, #10
 80011be:	4353      	muls	r3, r2
        counter--;
 80011c0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0a0      	beq.n	800110a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80011c8:	9b01      	ldr	r3, [sp, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	e7f8      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x120>
 80011ce:	bf00      	nop
 80011d0:	40012000 	.word	0x40012000
 80011d4:	40012300 	.word	0x40012300
 80011d8:	10000012 	.word	0x10000012
 80011dc:	20000008 	.word	0x20000008
 80011e0:	000f4240 	.word	0x000f4240

080011e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	0200      	lsls	r0, r0, #8
 80011f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80011fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001200:	60d3      	str	r3, [r2, #12]
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b530      	push	{r4, r5, lr}
 800120c:	68dc      	ldr	r4, [r3, #12]
 800120e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001212:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	2b04      	cmp	r3, #4
 800121a:	bf28      	it	cs
 800121c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 0501 	mov.w	r5, #1
 8001224:	fa05 f303 	lsl.w	r3, r5, r3
 8001228:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122c:	bf8c      	ite	hi
 800122e:	3c03      	subhi	r4, #3
 8001230:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001232:	4019      	ands	r1, r3
 8001234:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001236:	fa05 f404 	lsl.w	r4, r5, r4
 800123a:	3c01      	subs	r4, #1
 800123c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800123e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	ea42 0201 	orr.w	r2, r2, r1
 8001244:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	bfad      	iteet	ge
 800124a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	f000 000f 	andlt.w	r0, r0, #15
 8001252:	4b06      	ldrlt	r3, [pc, #24]	; (800126c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	bfb5      	itete	lt
 800125a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001264:	bd30      	pop	{r4, r5, pc}
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	e000ed14 	.word	0xe000ed14

08001270 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	3801      	subs	r0, #1
 8001272:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001276:	d20a      	bcs.n	800128e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	21f0      	movs	r1, #240	; 0xf0
 8001280:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001434 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4a60      	ldr	r2, [pc, #384]	; (800142c <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80012ac:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80012b4:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80012ba:	42ac      	cmp	r4, r5
 80012bc:	f040 80a6 	bne.w	800140c <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	684c      	ldr	r4, [r1, #4]
 80012c2:	f024 0c10 	bic.w	ip, r4, #16
 80012c6:	f10c 36ff 	add.w	r6, ip, #4294967295
 80012ca:	2e01      	cmp	r6, #1
 80012cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80012d0:	d812      	bhi.n	80012f8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80012d2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	2603      	movs	r6, #3
 80012d6:	fa06 f60e 	lsl.w	r6, r6, lr
 80012da:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012de:	68ce      	ldr	r6, [r1, #12]
 80012e0:	fa06 f60e 	lsl.w	r6, r6, lr
 80012e4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80012e6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80012e8:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ea:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ee:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012f2:	409e      	lsls	r6, r3
 80012f4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80012f6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80012fa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fc:	fa06 f60e 	lsl.w	r6, r6, lr
 8001300:	43f6      	mvns	r6, r6
 8001302:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001306:	688f      	ldr	r7, [r1, #8]
 8001308:	fa07 f70e 	lsl.w	r7, r7, lr
 800130c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001310:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001314:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001316:	d116      	bne.n	8001346 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001318:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800131c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001320:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001324:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001328:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800132c:	f04f 0c0f 	mov.w	ip, #15
 8001330:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001334:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	690f      	ldr	r7, [r1, #16]
 800133a:	fa07 f70b 	lsl.w	r7, r7, fp
 800133e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001346:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001348:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134a:	f004 0703 	and.w	r7, r4, #3
 800134e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001352:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001356:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	00e6      	lsls	r6, r4, #3
 800135a:	d557      	bpl.n	800140c <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	f04f 0b00 	mov.w	fp, #0
 8001360:	f8cd b00c 	str.w	fp, [sp, #12]
 8001364:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001368:	4e31      	ldr	r6, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800136e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001372:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001376:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800137a:	9703      	str	r7, [sp, #12]
 800137c:	9f03      	ldr	r7, [sp, #12]
 800137e:	f023 0703 	bic.w	r7, r3, #3
 8001382:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001386:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001392:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001396:	f04f 0e0f 	mov.w	lr, #15
 800139a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a4:	d039      	beq.n	800141a <HAL_GPIO_Init+0x17e>
 80013a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80013aa:	42b0      	cmp	r0, r6
 80013ac:	d037      	beq.n	800141e <HAL_GPIO_Init+0x182>
 80013ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80013b2:	42b0      	cmp	r0, r6
 80013b4:	d035      	beq.n	8001422 <HAL_GPIO_Init+0x186>
 80013b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80013ba:	42b0      	cmp	r0, r6
 80013bc:	d033      	beq.n	8001426 <HAL_GPIO_Init+0x18a>
 80013be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80013c2:	42b0      	cmp	r0, r6
 80013c4:	bf14      	ite	ne
 80013c6:	2607      	movne	r6, #7
 80013c8:	2604      	moveq	r6, #4
 80013ca:	fa06 f60c 	lsl.w	r6, r6, ip
 80013ce:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80013d4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013dc:	bf0c      	ite	eq
 80013de:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80013e0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80013e2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80013e4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013ea:	bf0c      	ite	eq
 80013ec:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80013ee:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80013f0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80013f8:	bf0c      	ite	eq
 80013fa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80013fc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80013fe:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001402:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001404:	bf54      	ite	pl
 8001406:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001408:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800140a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140c:	3301      	adds	r3, #1
 800140e:	2b10      	cmp	r3, #16
 8001410:	f47f af4f 	bne.w	80012b2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001414:	b005      	add	sp, #20
 8001416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	465e      	mov	r6, fp
 800141c:	e7d5      	b.n	80013ca <HAL_GPIO_Init+0x12e>
 800141e:	2601      	movs	r6, #1
 8001420:	e7d3      	b.n	80013ca <HAL_GPIO_Init+0x12e>
 8001422:	2602      	movs	r6, #2
 8001424:	e7d1      	b.n	80013ca <HAL_GPIO_Init+0x12e>
 8001426:	2603      	movs	r6, #3
 8001428:	e7cf      	b.n	80013ca <HAL_GPIO_Init+0x12e>
 800142a:	bf00      	nop
 800142c:	40013c00 	.word	0x40013c00
 8001430:	40020000 	.word	0x40020000
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001438:	6903      	ldr	r3, [r0, #16]
 800143a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800143c:	bf14      	ite	ne
 800143e:	2001      	movne	r0, #1
 8001440:	2000      	moveq	r0, #0
 8001442:	4770      	bx	lr

08001444 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	b10a      	cbz	r2, 800144a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	6181      	str	r1, [r0, #24]
 8001448:	4770      	bx	lr
 800144a:	0409      	lsls	r1, r1, #16
 800144c:	e7fb      	b.n	8001446 <HAL_GPIO_WritePin+0x2>

0800144e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800144e:	6801      	ldr	r1, [r0, #0]
 8001450:	694b      	ldr	r3, [r1, #20]
 8001452:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	d010      	beq.n	800147e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800145c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001460:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001462:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001464:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001466:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800146a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800146e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001470:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	4770      	bx	lr
  }
  return HAL_OK;
 800147e:	4618      	mov	r0, r3
}
 8001480:	4770      	bx	lr

08001482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001482:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001486:	4604      	mov	r4, r0
 8001488:	4617      	mov	r7, r2
 800148a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800148c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001490:	b28e      	uxth	r6, r1
 8001492:	6825      	ldr	r5, [r4, #0]
 8001494:	f1b8 0f01 	cmp.w	r8, #1
 8001498:	bf0c      	ite	eq
 800149a:	696b      	ldreq	r3, [r5, #20]
 800149c:	69ab      	ldrne	r3, [r5, #24]
 800149e:	ea36 0303 	bics.w	r3, r6, r3
 80014a2:	bf14      	ite	ne
 80014a4:	2001      	movne	r0, #1
 80014a6:	2000      	moveq	r0, #0
 80014a8:	b908      	cbnz	r0, 80014ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80014aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ae:	696b      	ldr	r3, [r5, #20]
 80014b0:	055a      	lsls	r2, r3, #21
 80014b2:	d516      	bpl.n	80014e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ba:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014bc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80014c0:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80014c2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014d2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014d6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80014d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80014e2:	1c7b      	adds	r3, r7, #1
 80014e4:	d0d5      	beq.n	8001492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e6:	f7ff fcb7 	bl	8000e58 <HAL_GetTick>
 80014ea:	eba0 0009 	sub.w	r0, r0, r9
 80014ee:	4287      	cmp	r7, r0
 80014f0:	d301      	bcc.n	80014f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80014f2:	2f00      	cmp	r7, #0
 80014f4:	d1cd      	bne.n	8001492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014f6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80014f8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014fa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001500:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001504:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001506:	f042 0220 	orr.w	r2, r2, #32
 800150a:	e7e4      	b.n	80014d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800150c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	4604      	mov	r4, r0
 8001510:	460d      	mov	r5, r1
 8001512:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	075b      	lsls	r3, r3, #29
 800151a:	d501      	bpl.n	8001520 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800151c:	2000      	movs	r0, #0
 800151e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff94 	bl	800144e <I2C_IsAcknowledgeFailed>
 8001526:	b9a8      	cbnz	r0, 8001554 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001528:	1c6a      	adds	r2, r5, #1
 800152a:	d0f3      	beq.n	8001514 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152c:	f7ff fc94 	bl	8000e58 <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	4285      	cmp	r5, r0
 8001534:	d301      	bcc.n	800153a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001536:	2d00      	cmp	r5, #0
 8001538:	d1ec      	bne.n	8001514 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800153a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800153c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800153e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001540:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001544:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001548:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800154a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001554:	2001      	movs	r0, #1
}
 8001556:	bd70      	pop	{r4, r5, r6, pc}

08001558 <I2C_WaitOnFlagUntilTimeout>:
{
 8001558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800155c:	9e08      	ldr	r6, [sp, #32]
 800155e:	4604      	mov	r4, r0
 8001560:	4690      	mov	r8, r2
 8001562:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001564:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001568:	b28d      	uxth	r5, r1
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	f1b9 0f01 	cmp.w	r9, #1
 8001570:	bf0c      	ite	eq
 8001572:	695b      	ldreq	r3, [r3, #20]
 8001574:	699b      	ldrne	r3, [r3, #24]
 8001576:	ea35 0303 	bics.w	r3, r5, r3
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	4543      	cmp	r3, r8
 8001582:	d002      	beq.n	800158a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001584:	2000      	movs	r0, #0
}
 8001586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800158a:	1c7b      	adds	r3, r7, #1
 800158c:	d0ed      	beq.n	800156a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158e:	f7ff fc63 	bl	8000e58 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	4287      	cmp	r7, r0
 8001596:	d301      	bcc.n	800159c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001598:	2f00      	cmp	r7, #0
 800159a:	d1e6      	bne.n	800156a <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800159c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800159e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015a0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015b6:	2001      	movs	r0, #1
 80015b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080015bc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	4604      	mov	r4, r0
 80015c0:	460d      	mov	r5, r1
 80015c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	d501      	bpl.n	80015d0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80015cc:	2000      	movs	r0, #0
 80015ce:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff ff3c 	bl	800144e <I2C_IsAcknowledgeFailed>
 80015d6:	b9a8      	cbnz	r0, 8001604 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80015d8:	1c6a      	adds	r2, r5, #1
 80015da:	d0f3      	beq.n	80015c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015dc:	f7ff fc3c 	bl	8000e58 <HAL_GetTick>
 80015e0:	1b80      	subs	r0, r0, r6
 80015e2:	4285      	cmp	r5, r0
 80015e4:	d301      	bcc.n	80015ea <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80015e6:	2d00      	cmp	r5, #0
 80015e8:	d1ec      	bne.n	80015c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015ea:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80015ec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015ee:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015fe:	f042 0220 	orr.w	r2, r2, #32
 8001602:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001604:	2001      	movs	r0, #1
}
 8001606:	bd70      	pop	{r4, r5, r6, pc}

08001608 <HAL_I2C_Init>:
{
 8001608:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800160a:	4604      	mov	r4, r0
 800160c:	b908      	cbnz	r0, 8001612 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800160e:	2001      	movs	r0, #1
 8001610:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001612:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800161a:	b91b      	cbnz	r3, 8001624 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800161c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001620:	f000 fdba 	bl	8002198 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	2324      	movs	r3, #36	; 0x24
 8001626:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800163a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001644:	f000 fbd0 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001648:	6865      	ldr	r5, [r4, #4]
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_I2C_Init+0x148>)
 800164c:	429d      	cmp	r5, r3
 800164e:	d84d      	bhi.n	80016ec <HAL_I2C_Init+0xe4>
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_I2C_Init+0x14c>)
 8001652:	4298      	cmp	r0, r3
 8001654:	d9db      	bls.n	800160e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001656:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001658:	493f      	ldr	r1, [pc, #252]	; (8001758 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800165c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001664:	430b      	orrs	r3, r1
 8001666:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001668:	6a13      	ldr	r3, [r2, #32]
 800166a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800166e:	3101      	adds	r1, #1
 8001670:	4319      	orrs	r1, r3
 8001672:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001674:	69d1      	ldr	r1, [r2, #28]
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_I2C_Init+0x148>)
 8001678:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800167c:	429d      	cmp	r5, r3
 800167e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001682:	f100 30ff 	add.w	r0, r0, #4294967295
 8001686:	d848      	bhi.n	800171a <HAL_I2C_Init+0x112>
 8001688:	006d      	lsls	r5, r5, #1
 800168a:	fbb0 f0f5 	udiv	r0, r0, r5
 800168e:	3001      	adds	r0, #1
 8001690:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001694:	2b04      	cmp	r3, #4
 8001696:	bf38      	it	cc
 8001698:	2304      	movcc	r3, #4
 800169a:	430b      	orrs	r3, r1
 800169c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800169e:	6811      	ldr	r1, [r2, #0]
 80016a0:	6a20      	ldr	r0, [r4, #32]
 80016a2:	69e3      	ldr	r3, [r4, #28]
 80016a4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80016a8:	4303      	orrs	r3, r0
 80016aa:	430b      	orrs	r3, r1
 80016ac:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016ae:	6891      	ldr	r1, [r2, #8]
 80016b0:	68e0      	ldr	r0, [r4, #12]
 80016b2:	6923      	ldr	r3, [r4, #16]
 80016b4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80016b8:	4303      	orrs	r3, r0
 80016ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80016be:	430b      	orrs	r3, r1
 80016c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c2:	68d1      	ldr	r1, [r2, #12]
 80016c4:	69a0      	ldr	r0, [r4, #24]
 80016c6:	6963      	ldr	r3, [r4, #20]
 80016c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80016cc:	4303      	orrs	r3, r0
 80016ce:	430b      	orrs	r3, r1
 80016d0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80016d2:	6813      	ldr	r3, [r2, #0]
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016da:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016de:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_I2C_Init+0x154>)
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d98d      	bls.n	800160e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80016f4:	4e18      	ldr	r6, [pc, #96]	; (8001758 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80016f8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001700:	4333      	orrs	r3, r6
 8001702:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001704:	6a13      	ldr	r3, [r2, #32]
 8001706:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800170a:	4371      	muls	r1, r6
 800170c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001710:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001714:	fbb1 f1f6 	udiv	r1, r1, r6
 8001718:	e7a9      	b.n	800166e <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800171a:	68a3      	ldr	r3, [r4, #8]
 800171c:	b953      	cbnz	r3, 8001734 <HAL_I2C_Init+0x12c>
 800171e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001722:	fbb0 f0f3 	udiv	r0, r0, r3
 8001726:	1c43      	adds	r3, r0, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	b16b      	cbz	r3, 800174a <HAL_I2C_Init+0x142>
 800172e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001732:	e7b2      	b.n	800169a <HAL_I2C_Init+0x92>
 8001734:	2319      	movs	r3, #25
 8001736:	436b      	muls	r3, r5
 8001738:	fbb0 f0f3 	udiv	r0, r0, r3
 800173c:	1c43      	adds	r3, r0, #1
 800173e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001742:	b113      	cbz	r3, 800174a <HAL_I2C_Init+0x142>
 8001744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001748:	e7a7      	b.n	800169a <HAL_I2C_Init+0x92>
 800174a:	2301      	movs	r3, #1
 800174c:	e7a5      	b.n	800169a <HAL_I2C_Init+0x92>
 800174e:	bf00      	nop
 8001750:	000186a0 	.word	0x000186a0
 8001754:	001e847f 	.word	0x001e847f
 8001758:	000f4240 	.word	0x000f4240
 800175c:	003d08ff 	.word	0x003d08ff

08001760 <HAL_I2C_Master_Transmit>:
{
 8001760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001764:	4604      	mov	r4, r0
 8001766:	461f      	mov	r7, r3
 8001768:	460d      	mov	r5, r1
 800176a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fb74 	bl	8000e58 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001770:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001774:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001776:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001778:	d004      	beq.n	8001784 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800177a:	2502      	movs	r5, #2
}
 800177c:	4628      	mov	r0, r5
 800177e:	b004      	add	sp, #16
 8001780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	2319      	movs	r3, #25
 8001788:	2201      	movs	r2, #1
 800178a:	495b      	ldr	r1, [pc, #364]	; (80018f8 <HAL_I2C_Master_Transmit+0x198>)
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff fee3 	bl	8001558 <I2C_WaitOnFlagUntilTimeout>
 8001792:	2800      	cmp	r0, #0
 8001794:	d1f1      	bne.n	800177a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001796:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d0ed      	beq.n	800177a <HAL_I2C_Master_Transmit+0x1a>
 800179e:	2301      	movs	r3, #1
 80017a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80017aa:	bf5e      	ittt	pl
 80017ac:	681a      	ldrpl	r2, [r3, #0]
 80017ae:	f042 0201 	orrpl.w	r2, r2, #1
 80017b2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ba:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017bc:	2221      	movs	r2, #33	; 0x21
 80017be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017c2:	2210      	movs	r2, #16
 80017c4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017c8:	2200      	movs	r2, #0
 80017ca:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80017cc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017d0:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d2:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_I2C_Master_Transmit+0x19c>)
 80017d4:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80017d8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017dc:	2a08      	cmp	r2, #8
 80017de:	d004      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x8a>
 80017e0:	2a01      	cmp	r2, #1
 80017e2:	d002      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x8a>
 80017e4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017e8:	d104      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e002      	b.n	80017fa <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017f6:	2a12      	cmp	r2, #18
 80017f8:	d0f7      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017fa:	2200      	movs	r2, #0
 80017fc:	9600      	str	r6, [sp, #0]
 80017fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fea7 	bl	8001558 <I2C_WaitOnFlagUntilTimeout>
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	b138      	cbz	r0, 800181e <HAL_I2C_Master_Transmit+0xbe>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001812:	bf44      	itt	mi
 8001814:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8001818:	6423      	strmi	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800181a:	2501      	movs	r5, #1
 800181c:	e7ae      	b.n	800177c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800181e:	6923      	ldr	r3, [r4, #16]
 8001820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001824:	d113      	bne.n	800184e <HAL_I2C_Master_Transmit+0xee>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001826:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800182a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800182c:	4633      	mov	r3, r6
 800182e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001830:	4933      	ldr	r1, [pc, #204]	; (8001900 <HAL_I2C_Master_Transmit+0x1a0>)
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fe25 	bl	8001482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001838:	4605      	mov	r5, r0
 800183a:	2800      	cmp	r0, #0
 800183c:	d1ed      	bne.n	800181a <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	9003      	str	r0, [sp, #12]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	9203      	str	r2, [sp, #12]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	9303      	str	r3, [sp, #12]
 800184a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800184c:	e044      	b.n	80018d8 <HAL_I2C_Master_Transmit+0x178>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800184e:	11eb      	asrs	r3, r5, #7
 8001850:	f003 0306 	and.w	r3, r3, #6
 8001854:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001858:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800185a:	492a      	ldr	r1, [pc, #168]	; (8001904 <HAL_I2C_Master_Transmit+0x1a4>)
 800185c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800185e:	4633      	mov	r3, r6
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff fe0e 	bl	8001482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001866:	2800      	cmp	r0, #0
 8001868:	d1d7      	bne.n	800181a <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	b2ed      	uxtb	r5, r5
 800186e:	611d      	str	r5, [r3, #16]
 8001870:	e7dc      	b.n	800182c <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001872:	4632      	mov	r2, r6
 8001874:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff fea0 	bl	80015bc <I2C_WaitOnTXEFlagUntilTimeout>
 800187c:	b140      	cbz	r0, 8001890 <HAL_I2C_Master_Transmit+0x130>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001880:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001882:	bf01      	itttt	eq
 8001884:	6822      	ldreq	r2, [r4, #0]
 8001886:	6813      	ldreq	r3, [r2, #0]
 8001888:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800188c:	6013      	streq	r3, [r2, #0]
 800188e:	e7c4      	b.n	800181a <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001892:	6820      	ldr	r0, [r4, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	f812 1b01 	ldrb.w	r1, [r2], #1
 800189a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800189c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800189e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80018a0:	3a01      	subs	r2, #1
 80018a2:	b292      	uxth	r2, r2
 80018a4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80018a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80018aa:	1e51      	subs	r1, r2, #1
 80018ac:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ae:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80018b0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018b2:	d50a      	bpl.n	80018ca <HAL_I2C_Master_Transmit+0x16a>
 80018b4:	b149      	cbz	r1, 80018ca <HAL_I2C_Master_Transmit+0x16a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b6:	7859      	ldrb	r1, [r3, #1]
 80018b8:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80018ba:	3302      	adds	r3, #2
 80018bc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80018be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80018c4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80018c6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80018c8:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ca:	4632      	mov	r2, r6
 80018cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff fe1c 	bl	800150c <I2C_WaitOnBTFFlagUntilTimeout>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d1d2      	bne.n	800187e <HAL_I2C_Master_Transmit+0x11e>
    while (hi2c->XferSize > 0U)
 80018d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1c9      	bne.n	8001872 <HAL_I2C_Master_Transmit+0x112>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	680a      	ldr	r2, [r1, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	2220      	movs	r2, #32
 80018ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80018ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80018f6:	e741      	b.n	800177c <HAL_I2C_Master_Transmit+0x1c>
 80018f8:	00100002 	.word	0x00100002
 80018fc:	ffff0000 	.word	0xffff0000
 8001900:	00010002 	.word	0x00010002
 8001904:	00010008 	.word	0x00010008

08001908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800190c:	4604      	mov	r4, r0
 800190e:	b908      	cbnz	r0, 8001914 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001910:	2001      	movs	r0, #1
 8001912:	e03f      	b.n	8001994 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001914:	6803      	ldr	r3, [r0, #0]
 8001916:	07dd      	lsls	r5, r3, #31
 8001918:	d410      	bmi.n	800193c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	0798      	lsls	r0, r3, #30
 800191e:	d45a      	bmi.n	80019d6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	071a      	lsls	r2, r3, #28
 8001924:	f100 809c 	bmi.w	8001a60 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	075b      	lsls	r3, r3, #29
 800192c:	f100 80ba 	bmi.w	8001aa4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	69a0      	ldr	r0, [r4, #24]
 8001932:	2800      	cmp	r0, #0
 8001934:	f040 811b 	bne.w	8001b6e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001938:	2000      	movs	r0, #0
 800193a:	e02b      	b.n	8001994 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800193c:	4ba4      	ldr	r3, [pc, #656]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	f002 020c 	and.w	r2, r2, #12
 8001944:	2a04      	cmp	r2, #4
 8001946:	d007      	beq.n	8001958 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800194e:	2a08      	cmp	r2, #8
 8001950:	d10a      	bne.n	8001968 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0259      	lsls	r1, r3, #9
 8001956:	d507      	bpl.n	8001968 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b9d      	ldr	r3, [pc, #628]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	039a      	lsls	r2, r3, #14
 800195e:	d5dc      	bpl.n	800191a <HAL_RCC_OscConfig+0x12>
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1d9      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
 8001966:	e7d3      	b.n	8001910 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	4d99      	ldr	r5, [pc, #612]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d113      	bne.n	800199a <HAL_RCC_OscConfig+0x92>
 8001972:	682b      	ldr	r3, [r5, #0]
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800197a:	f7ff fa6d 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4d94      	ldr	r5, [pc, #592]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001980:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	039b      	lsls	r3, r3, #14
 8001986:	d4c8      	bmi.n	800191a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fa66 	bl	8000e58 <HAL_GetTick>
 800198c:	1b80      	subs	r0, r0, r6
 800198e:	2864      	cmp	r0, #100	; 0x64
 8001990:	d9f7      	bls.n	8001982 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001992:	2003      	movs	r0, #3
}
 8001994:	b002      	add	sp, #8
 8001996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199e:	d104      	bne.n	80019aa <HAL_RCC_OscConfig+0xa2>
 80019a0:	682b      	ldr	r3, [r5, #0]
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a6:	602b      	str	r3, [r5, #0]
 80019a8:	e7e3      	b.n	8001972 <HAL_RCC_OscConfig+0x6a>
 80019aa:	682a      	ldr	r2, [r5, #0]
 80019ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019b0:	602a      	str	r2, [r5, #0]
 80019b2:	682a      	ldr	r2, [r5, #0]
 80019b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019b8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1dd      	bne.n	800197a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80019be:	f7ff fa4b 	bl	8000e58 <HAL_GetTick>
 80019c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	039f      	lsls	r7, r3, #14
 80019c8:	d5a7      	bpl.n	800191a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff fa45 	bl	8000e58 <HAL_GetTick>
 80019ce:	1b80      	subs	r0, r0, r6
 80019d0:	2864      	cmp	r0, #100	; 0x64
 80019d2:	d9f7      	bls.n	80019c4 <HAL_RCC_OscConfig+0xbc>
 80019d4:	e7dd      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	f012 0f0c 	tst.w	r2, #12
 80019de:	d007      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e6:	2a08      	cmp	r2, #8
 80019e8:	d111      	bne.n	8001a0e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	025e      	lsls	r6, r3, #9
 80019ee:	d40e      	bmi.n	8001a0e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f0:	4b77      	ldr	r3, [pc, #476]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	0795      	lsls	r5, r2, #30
 80019f6:	d502      	bpl.n	80019fe <HAL_RCC_OscConfig+0xf6>
 80019f8:	68e2      	ldr	r2, [r4, #12]
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d188      	bne.n	8001910 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	6921      	ldr	r1, [r4, #16]
 8001a02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0c:	e788      	b.n	8001920 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a0e:	68e2      	ldr	r2, [r4, #12]
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x2cc>)
 8001a12:	b1b2      	cbz	r2, 8001a42 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa1e 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4d6c      	ldr	r5, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001a1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	0798      	lsls	r0, r3, #30
 8001a24:	d507      	bpl.n	8001a36 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	6922      	ldr	r2, [r4, #16]
 8001a2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a32:	602b      	str	r3, [r5, #0]
 8001a34:	e774      	b.n	8001920 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fa0f 	bl	8000e58 <HAL_GetTick>
 8001a3a:	1b80      	subs	r0, r0, r6
 8001a3c:	2802      	cmp	r0, #2
 8001a3e:	d9ef      	bls.n	8001a20 <HAL_RCC_OscConfig+0x118>
 8001a40:	e7a7      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001a42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa08 	bl	8000e58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a48:	4d61      	ldr	r5, [pc, #388]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001a4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	0799      	lsls	r1, r3, #30
 8001a50:	f57f af66 	bpl.w	8001920 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fa00 	bl	8000e58 <HAL_GetTick>
 8001a58:	1b80      	subs	r0, r0, r6
 8001a5a:	2802      	cmp	r0, #2
 8001a5c:	d9f6      	bls.n	8001a4c <HAL_RCC_OscConfig+0x144>
 8001a5e:	e798      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a60:	6962      	ldr	r2, [r4, #20]
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x2d0>)
 8001a64:	b17a      	cbz	r2, 8001a86 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f9f5 	bl	8000e58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	4d58      	ldr	r5, [pc, #352]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001a70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a74:	079f      	lsls	r7, r3, #30
 8001a76:	f53f af57 	bmi.w	8001928 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f9ed 	bl	8000e58 <HAL_GetTick>
 8001a7e:	1b80      	subs	r0, r0, r6
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9f6      	bls.n	8001a72 <HAL_RCC_OscConfig+0x16a>
 8001a84:	e785      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001a86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a88:	f7ff f9e6 	bl	8000e58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4d50      	ldr	r5, [pc, #320]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001a8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a92:	0798      	lsls	r0, r3, #30
 8001a94:	f57f af48 	bpl.w	8001928 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f9de 	bl	8000e58 <HAL_GetTick>
 8001a9c:	1b80      	subs	r0, r0, r6
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d9f6      	bls.n	8001a90 <HAL_RCC_OscConfig+0x188>
 8001aa2:	e776      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 8001aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001aac:	d128      	bne.n	8001b00 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	9201      	str	r2, [sp, #4]
 8001ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ac2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	4d45      	ldr	r5, [pc, #276]	; (8001bdc <HAL_RCC_OscConfig+0x2d4>)
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	05d9      	lsls	r1, r3, #23
 8001aca:	d51b      	bpl.n	8001b04 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	68a3      	ldr	r3, [r4, #8]
 8001ace:	4d40      	ldr	r5, [pc, #256]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d127      	bne.n	8001b24 <HAL_RCC_OscConfig+0x21c>
 8001ad4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001adc:	f7ff f9bc 	bl	8000e58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4d3b      	ldr	r5, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001ae2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001aea:	079b      	lsls	r3, r3, #30
 8001aec:	d539      	bpl.n	8001b62 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001aee:	2e00      	cmp	r6, #0
 8001af0:	f43f af1e 	beq.w	8001930 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4a36      	ldr	r2, [pc, #216]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 8001af6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	e717      	b.n	8001930 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001b00:	2600      	movs	r6, #0
 8001b02:	e7df      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f9a4 	bl	8000e58 <HAL_GetTick>
 8001b10:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	05da      	lsls	r2, r3, #23
 8001b16:	d4d9      	bmi.n	8001acc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7ff f99e 	bl	8000e58 <HAL_GetTick>
 8001b1c:	1bc0      	subs	r0, r0, r7
 8001b1e:	2802      	cmp	r0, #2
 8001b20:	d9f7      	bls.n	8001b12 <HAL_RCC_OscConfig+0x20a>
 8001b22:	e736      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d104      	bne.n	8001b32 <HAL_RCC_OscConfig+0x22a>
 8001b28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	672b      	str	r3, [r5, #112]	; 0x70
 8001b30:	e7d0      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1cc>
 8001b32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	672a      	str	r2, [r5, #112]	; 0x70
 8001b3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b3c:	f022 0204 	bic.w	r2, r2, #4
 8001b40:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ca      	bne.n	8001adc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001b46:	f7ff f987 	bl	8000e58 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b4e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b52:	0798      	lsls	r0, r3, #30
 8001b54:	d5cb      	bpl.n	8001aee <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff f97f 	bl	8000e58 <HAL_GetTick>
 8001b5a:	1bc0      	subs	r0, r0, r7
 8001b5c:	4540      	cmp	r0, r8
 8001b5e:	d9f7      	bls.n	8001b50 <HAL_RCC_OscConfig+0x248>
 8001b60:	e717      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff f979 	bl	8000e58 <HAL_GetTick>
 8001b66:	1bc0      	subs	r0, r0, r7
 8001b68:	4540      	cmp	r0, r8
 8001b6a:	d9bd      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x1e0>
 8001b6c:	e711      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b6e:	4d18      	ldr	r5, [pc, #96]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
 8001b70:	68ab      	ldr	r3, [r5, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d047      	beq.n	8001c0a <HAL_RCC_OscConfig+0x302>
 8001b7a:	4e19      	ldr	r6, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x2d8>)
 8001b7c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001b80:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	d135      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001b84:	f7ff f968 	bl	8000e58 <HAL_GetTick>
 8001b88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	0199      	lsls	r1, r3, #6
 8001b8e:	d429      	bmi.n	8001be4 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b90:	6a22      	ldr	r2, [r4, #32]
 8001b92:	69e3      	ldr	r3, [r4, #28]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b98:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ba2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	; (8001bd0 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba6:	0852      	lsrs	r2, r2, #1
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f950 	bl	8000e58 <HAL_GetTick>
 8001bb8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	019a      	lsls	r2, r3, #6
 8001bbe:	f53f aebb 	bmi.w	8001938 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff f949 	bl	8000e58 <HAL_GetTick>
 8001bc6:	1b40      	subs	r0, r0, r5
 8001bc8:	2802      	cmp	r0, #2
 8001bca:	d9f6      	bls.n	8001bba <HAL_RCC_OscConfig+0x2b2>
 8001bcc:	e6e1      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f938 	bl	8000e58 <HAL_GetTick>
 8001be8:	1bc0      	subs	r0, r0, r7
 8001bea:	2802      	cmp	r0, #2
 8001bec:	d9cd      	bls.n	8001b8a <HAL_RCC_OscConfig+0x282>
 8001bee:	e6d0      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f932 	bl	8000e58 <HAL_GetTick>
 8001bf4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	682b      	ldr	r3, [r5, #0]
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	f57f ae9d 	bpl.w	8001938 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f92b 	bl	8000e58 <HAL_GetTick>
 8001c02:	1b00      	subs	r0, r0, r4
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d9f6      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2ee>
 8001c08:	e6c3      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0a:	2801      	cmp	r0, #1
 8001c0c:	f43f aec2 	beq.w	8001994 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8001c10:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	69e3      	ldr	r3, [r4, #28]
 8001c14:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f47f ae79 	bne.w	8001910 <HAL_RCC_OscConfig+0x8>
 8001c1e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c20:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	4293      	cmp	r3, r2
 8001c26:	f47f ae73 	bne.w	8001910 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c30:	4003      	ands	r3, r0
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f47f ae6c 	bne.w	8001910 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c3a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	f47f ae66 	bne.w	8001910 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c46:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001c4a:	1ac0      	subs	r0, r0, r3
 8001c4c:	bf18      	it	ne
 8001c4e:	2001      	movne	r0, #1
 8001c50:	e6a0      	b.n	8001994 <HAL_RCC_OscConfig+0x8c>
 8001c52:	bf00      	nop

08001c54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c54:	4913      	ldr	r1, [pc, #76]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c56:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c58:	688b      	ldr	r3, [r1, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x16>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c66:	4810      	ldr	r0, [pc, #64]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c68:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c6a:	4810      	ldr	r0, [pc, #64]	; (8001cac <HAL_RCC_GetSysClockFreq+0x58>)
 8001c6c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c70:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c72:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c74:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	bf14      	ite	ne
 8001c7a:	480c      	ldrne	r0, [pc, #48]	; (8001cac <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	480a      	ldreq	r0, [pc, #40]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c82:	bf18      	it	ne
 8001c84:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	fba1 0100 	umull	r0, r1, r1, r0
 8001c8e:	f7fe ff11 	bl	8000ab4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca2:	bd08      	pop	{r3, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <HAL_RCC_ClockConfig>:
{
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	b910      	cbnz	r0, 8001cc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
 8001cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	f002 020f 	and.w	r2, r2, #15
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d329      	bcc.n	8001d20 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	6821      	ldr	r1, [r4, #0]
 8001cce:	078f      	lsls	r7, r1, #30
 8001cd0:	d42e      	bmi.n	8001d30 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	07c8      	lsls	r0, r1, #31
 8001cd4:	d441      	bmi.n	8001d5a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f002 020f 	and.w	r2, r2, #15
 8001cde:	4295      	cmp	r5, r2
 8001ce0:	d367      	bcc.n	8001db2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	0751      	lsls	r1, r2, #29
 8001ce6:	d46d      	bmi.n	8001dc4 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	0713      	lsls	r3, r2, #28
 8001cea:	d507      	bpl.n	8001cfc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001cee:	6921      	ldr	r1, [r4, #16]
 8001cf0:	6893      	ldr	r3, [r2, #8]
 8001cf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cfa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfc:	f7ff ffaa 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d02:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x12c>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	40d8      	lsrs	r0, r3
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x130>)
 8001d10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_RCC_ClockConfig+0x134>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f7ff f855 	bl	8000dc4 <HAL_InitTick>
  return HAL_OK;
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d20:	b2ca      	uxtb	r2, r1
 8001d22:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4299      	cmp	r1, r3
 8001d2c:	d1c5      	bne.n	8001cba <HAL_RCC_ClockConfig+0xa>
 8001d2e:	e7cd      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1c>
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d36:	bf1e      	ittt	ne
 8001d38:	689a      	ldrne	r2, [r3, #8]
 8001d3a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d3e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d42:	bf42      	ittt	mi
 8001d44:	689a      	ldrmi	r2, [r3, #8]
 8001d46:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d4a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	68a0      	ldr	r0, [r4, #8]
 8001d50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d54:	4302      	orrs	r2, r0
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e7bb      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	6862      	ldr	r2, [r4, #4]
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	d11d      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	d0a7      	beq.n	8001cba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	4e1b      	ldr	r6, [pc, #108]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d6c:	68b3      	ldr	r3, [r6, #8]
 8001d6e:	f023 0303 	bic.w	r3, r3, #3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d76:	f7ff f86f 	bl	8000e58 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d7e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d80:	68b3      	ldr	r3, [r6, #8]
 8001d82:	6862      	ldr	r2, [r4, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d8c:	d0a3      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7ff f863 	bl	8000e58 <HAL_GetTick>
 8001d92:	1bc0      	subs	r0, r0, r7
 8001d94:	4540      	cmp	r0, r8
 8001d96:	d9f3      	bls.n	8001d80 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
}
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9e:	1e91      	subs	r1, r2, #2
 8001da0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da4:	d802      	bhi.n	8001dac <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001daa:	e7dd      	b.n	8001d68 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	f013 0f02 	tst.w	r3, #2
 8001db0:	e7da      	b.n	8001d68 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	b2ea      	uxtb	r2, r5
 8001db4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	429d      	cmp	r5, r3
 8001dbe:	f47f af7c 	bne.w	8001cba <HAL_RCC_ClockConfig+0xa>
 8001dc2:	e78e      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4904      	ldr	r1, [pc, #16]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001dc6:	68e0      	ldr	r0, [r4, #12]
 8001dc8:	688b      	ldr	r3, [r1, #8]
 8001dca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001dce:	4303      	orrs	r3, r0
 8001dd0:	608b      	str	r3, [r1, #8]
 8001dd2:	e789      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x38>
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	0800311e 	.word	0x0800311e
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001df6:	6810      	ldr	r0, [r2, #0]
}
 8001df8:	40d8      	lsrs	r0, r3
 8001dfa:	4770      	bx	lr
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	0800312e 	.word	0x0800312e
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001e18:	bf1e      	ittt	ne
 8001e1a:	681a      	ldrne	r2, [r3, #0]
 8001e1c:	f042 0201 	orrne.w	r2, r2, #1
 8001e20:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4770      	bx	lr

08001e2c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001e2e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	4290      	cmp	r0, r2
 8001e32:	d00e      	beq.n	8001e52 <TIM_Base_SetConfig+0x26>
 8001e34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e38:	d00b      	beq.n	8001e52 <TIM_Base_SetConfig+0x26>
 8001e3a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e3e:	4290      	cmp	r0, r2
 8001e40:	d007      	beq.n	8001e52 <TIM_Base_SetConfig+0x26>
 8001e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e46:	4290      	cmp	r0, r2
 8001e48:	d003      	beq.n	8001e52 <TIM_Base_SetConfig+0x26>
 8001e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e4e:	4290      	cmp	r0, r2
 8001e50:	d115      	bne.n	8001e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e52:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e58:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5a:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <TIM_Base_SetConfig+0x94>)
 8001e5c:	4290      	cmp	r0, r2
 8001e5e:	d019      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e64:	d016      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e6a:	4290      	cmp	r0, r2
 8001e6c:	d012      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e72:	4290      	cmp	r0, r2
 8001e74:	d00e      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7a:	4290      	cmp	r0, r2
 8001e7c:	d00a      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e7e:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <TIM_Base_SetConfig+0x98>)
 8001e80:	4290      	cmp	r0, r2
 8001e82:	d007      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e88:	4290      	cmp	r0, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_Base_SetConfig+0x68>
 8001e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e90:	4290      	cmp	r0, r2
 8001e92:	d103      	bne.n	8001e9c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e94:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e9c:	694a      	ldr	r2, [r1, #20]
 8001e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ea2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001ea4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea6:	688b      	ldr	r3, [r1, #8]
 8001ea8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eaa:	680b      	ldr	r3, [r1, #0]
 8001eac:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <TIM_Base_SetConfig+0x94>)
 8001eb0:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb2:	bf04      	itt	eq
 8001eb4:	690b      	ldreq	r3, [r1, #16]
 8001eb6:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	6143      	str	r3, [r0, #20]
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40014000 	.word	0x40014000

08001ec8 <HAL_TIM_Base_Init>:
{
 8001ec8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001eca:	4604      	mov	r4, r0
 8001ecc:	b1a0      	cbz	r0, 8001ef8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ece:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ed2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed6:	b91b      	cbnz	r3, 8001ee0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ed8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001edc:	f000 fc40 	bl	8002760 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	1d21      	adds	r1, r4, #4
 8001eea:	f7ff ff9f 	bl	8001e2c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
}
 8001efa:	bd10      	pop	{r4, pc}

08001efc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8001efe:	2210      	movs	r2, #16
 8001f00:	2100      	movs	r1, #0
 8001f02:	4668      	mov	r0, sp
 8001f04:	f000 fc98 	bl	8002838 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_ADC1_Init+0x60>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <MX_ADC1_Init+0x64>)
 8001f0e:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f10:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8001f14:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f18:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001f1a:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f1c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f1e:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f20:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f22:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f26:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f28:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f2a:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f2c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f30:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f32:	f7fe ffab 	bl	8000e8c <HAL_ADC_Init>
 8001f36:	b108      	cbz	r0, 8001f3c <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 8001f38:	f000 fbc2 	bl	80026c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f3c:	2308      	movs	r3, #8
  sConfig.Rank = 1;
 8001f3e:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f42:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f44:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f46:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f48:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4a:	f7ff f8a9 	bl	80010a0 <HAL_ADC_ConfigChannel>
 8001f4e:	b108      	cbz	r0, 8001f54 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 8001f50:	f000 fbb6 	bl	80026c0 <Error_Handler>
  }

}
 8001f54:	b004      	add	sp, #16
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	200000b0 	.word	0x200000b0
 8001f5c:	40012000 	.word	0x40012000
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f64:	b510      	push	{r4, lr}
 8001f66:	4604      	mov	r4, r0
 8001f68:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	2214      	movs	r2, #20
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	a803      	add	r0, sp, #12
 8001f70:	f000 fc62 	bl	8002838 <memset>
  if(adcHandle->Instance==ADC1)
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_ADC_MspInit+0x5c>)
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d11e      	bne.n	8001fba <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f7c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001f80:	2100      	movs	r1, #0
 8001f82:	9101      	str	r1, [sp, #4]
 8001f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = Czytnik_gleby_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Czytnik_gleby_GPIO_Port, &GPIO_InitStruct);
 8001f86:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f90:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001f94:	9201      	str	r2, [sp, #4]
 8001f96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	9102      	str	r1, [sp, #8]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9c:	f042 0202 	orr.w	r2, r2, #2
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Czytnik_gleby_Pin;
 8001fac:	2301      	movs	r3, #1
 8001fae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(Czytnik_gleby_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(Czytnik_gleby_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f7ff f971 	bl	800129c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001fba:	b008      	add	sp, #32
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40012000 	.word	0x40012000
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fc8:	b500      	push	{lr}
 8001fca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	2214      	movs	r2, #20
 8001fce:	2100      	movs	r1, #0
 8001fd0:	a803      	add	r0, sp, #12
 8001fd2:	f000 fc31 	bl	8002838 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_GPIO_Init+0x60>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Czytnik_temp_wilg_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Czytnik_temp_wilg_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	4814      	ldr	r0, [pc, #80]	; (800202c <MX_GPIO_Init+0x64>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	9200      	str	r2, [sp, #0]
 8001fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001fe4:	6319      	str	r1, [r3, #48]	; 0x30
 8001fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001fec:	9100      	str	r1, [sp, #0]
 8001fee:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff4:	f041 0101 	orr.w	r1, r1, #1
 8001ff8:	6319      	str	r1, [r3, #48]	; 0x30
 8001ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffc:	f001 0101 	and.w	r1, r1, #1
 8002000:	9101      	str	r1, [sp, #4]
 8002002:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	9202      	str	r2, [sp, #8]
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	f042 0202 	orr.w	r2, r2, #2
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(Czytnik_temp_wilg_GPIO_Port, &GPIO_InitStruct);
 8002018:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = Czytnik_temp_wilg_Pin;
 800201a:	2308      	movs	r3, #8
 800201c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(Czytnik_temp_wilg_GPIO_Port, &GPIO_InitStruct);
 800201e:	f7ff f93d 	bl	800129c <HAL_GPIO_Init>

}
 8002022:	b009      	add	sp, #36	; 0x24
 8002024:	f85d fb04 	ldr.w	pc, [sp], #4
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000

08002030 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002032:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8002036:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002038:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 800203c:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002046:	f040 030c 	orr.w	r3, r0, #12
 800204a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800204e:	f040 0008 	orr.w	r0, r0, #8
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002052:	2364      	movs	r3, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002054:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002058:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	aa03      	add	r2, sp, #12
 8002060:	2304      	movs	r3, #4
 8002062:	214e      	movs	r1, #78	; 0x4e
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <lcd_send_cmd+0x40>)
 8002066:	f7ff fb7b 	bl	8001760 <HAL_I2C_Master_Transmit>
}
 800206a:	b005      	add	sp, #20
 800206c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002070:	200000f8 	.word	0x200000f8

08002074 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002076:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800207a:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800207c:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 8002080:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8002082:	f043 0309 	orr.w	r3, r3, #9
 8002086:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800208a:	f040 030d 	orr.w	r3, r0, #13
 800208e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8002092:	f040 0009 	orr.w	r0, r0, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002096:	2364      	movs	r3, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8002098:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800209c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	aa03      	add	r2, sp, #12
 80020a4:	2304      	movs	r3, #4
 80020a6:	214e      	movs	r1, #78	; 0x4e
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <lcd_send_data+0x40>)
 80020aa:	f7ff fb59 	bl	8001760 <HAL_I2C_Master_Transmit>
}
 80020ae:	b005      	add	sp, #20
 80020b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b4:	200000f8 	.word	0x200000f8

080020b8 <lcd_clear>:

void lcd_clear (void)
{
 80020b8:	b510      	push	{r4, lr}
	lcd_send_cmd (0x00);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff ffb8 	bl	8002030 <lcd_send_cmd>
 80020c0:	2464      	movs	r4, #100	; 0x64
	for (int i=0; i<100; i++)
	{
		lcd_send_data (' ');
 80020c2:	2020      	movs	r0, #32
 80020c4:	f7ff ffd6 	bl	8002074 <lcd_send_data>
	for (int i=0; i<100; i++)
 80020c8:	3c01      	subs	r4, #1
 80020ca:	d1fa      	bne.n	80020c2 <lcd_clear+0xa>
	}
}
 80020cc:	bd10      	pop	{r4, pc}

080020ce <lcd_init>:

void lcd_init (void)
{
 80020ce:	b508      	push	{r3, lr}
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80020d0:	2032      	movs	r0, #50	; 0x32
 80020d2:	f7fe fec7 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80020d6:	2030      	movs	r0, #48	; 0x30
 80020d8:	f7ff ffaa 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80020dc:	2005      	movs	r0, #5
 80020de:	f7fe fec1 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80020e2:	2030      	movs	r0, #48	; 0x30
 80020e4:	f7ff ffa4 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7fe febb 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80020ee:	2030      	movs	r0, #48	; 0x30
 80020f0:	f7ff ff9e 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(10);
 80020f4:	200a      	movs	r0, #10
 80020f6:	f7fe feb5 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80020fa:	2020      	movs	r0, #32
 80020fc:	f7ff ff98 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(10);
 8002100:	200a      	movs	r0, #10
 8002102:	f7fe feaf 	bl	8000e64 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002106:	2028      	movs	r0, #40	; 0x28
 8002108:	f7ff ff92 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(1);
 800210c:	2001      	movs	r0, #1
 800210e:	f7fe fea9 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002112:	2008      	movs	r0, #8
 8002114:	f7ff ff8c 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(1);
 8002118:	2001      	movs	r0, #1
 800211a:	f7fe fea3 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ff86 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(1);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe fe9d 	bl	8000e64 <HAL_Delay>
	HAL_Delay(1);
 800212a:	2001      	movs	r0, #1
 800212c:	f7fe fe9a 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002130:	2006      	movs	r0, #6
 8002132:	f7ff ff7d 	bl	8002030 <lcd_send_cmd>
	HAL_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7fe fe94 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800213c:	200c      	movs	r0, #12
}
 800213e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002142:	f7ff bf75 	b.w	8002030 <lcd_send_cmd>

08002146 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002146:	b510      	push	{r4, lr}
 8002148:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 800214a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800214e:	b900      	cbnz	r0, 8002152 <lcd_send_string+0xc>
}
 8002150:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 8002152:	f7ff ff8f 	bl	8002074 <lcd_send_data>
 8002156:	e7f8      	b.n	800214a <lcd_send_string+0x4>

08002158 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002158:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800215a:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_I2C1_Init+0x38>)
 800215e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8002194 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8002166:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800216a:	2300      	movs	r3, #0
 800216c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800216e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002170:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002172:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002174:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002176:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002178:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217a:	f7ff fa45 	bl	8001608 <HAL_I2C_Init>
 800217e:	b118      	cbz	r0, 8002188 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002184:	f000 ba9c 	b.w	80026c0 <Error_Handler>
 8002188:	bd08      	pop	{r3, pc}
 800218a:	bf00      	nop
 800218c:	200000f8 	.word	0x200000f8
 8002190:	40005400 	.word	0x40005400
 8002194:	000186a0 	.word	0x000186a0

08002198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002198:	b530      	push	{r4, r5, lr}
 800219a:	4604      	mov	r4, r0
 800219c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	2214      	movs	r2, #20
 80021a0:	2100      	movs	r1, #0
 80021a2:	a803      	add	r0, sp, #12
 80021a4:	f000 fb48 	bl	8002838 <memset>
  if(i2cHandle->Instance==I2C1)
 80021a8:	6822      	ldr	r2, [r4, #0]
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_I2C_MspInit+0x64>)
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d123      	bne.n	80021f8 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	4c13      	ldr	r4, [pc, #76]	; (8002200 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b4:	2500      	movs	r5, #0
 80021b6:	9501      	str	r5, [sp, #4]
 80021b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	6323      	str	r3, [r4, #48]	; 0x30
 80021c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ce:	2312      	movs	r3, #18
 80021d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021dc:	2304      	movs	r3, #4
 80021de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f7ff f85c 	bl	800129c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e4:	9502      	str	r5, [sp, #8]
 80021e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ec:	6423      	str	r3, [r4, #64]	; 0x40
 80021ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021f8:	b009      	add	sp, #36	; 0x24
 80021fa:	bd30      	pop	{r4, r5, pc}
 80021fc:	40005400 	.word	0x40005400
 8002200:	40023800 	.word	0x40023800
 8002204:	40020400 	.word	0x40020400

08002208 <delay>:
  */
void delay (uint16_t time)
{
	/* change your code here for the delay in microseconds */
	//time = time *1.5;
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <delay+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim10))<time);
 8002210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002212:	4282      	cmp	r2, r0
 8002214:	d3fc      	bcc.n	8002210 <delay+0x8>
}
 8002216:	4770      	bx	lr
 8002218:	2000015c 	.word	0x2000015c

0800221c <Display_Temp>:

void Display_Temp (float Temp)
{
 800221c:	b500      	push	{lr}
 800221e:	ed2d 8b02 	vpush	{d8}
 8002222:	b085      	sub	sp, #20
	char str[16] = {0};
 8002224:	2210      	movs	r2, #16
 8002226:	2100      	movs	r1, #0
 8002228:	4668      	mov	r0, sp
{
 800222a:	eeb0 8a40 	vmov.f32	s16, s0
	char str[16] = {0};
 800222e:	f000 fb03 	bl	8002838 <memset>
	lcd_send_cmd (0x80|0x00);
 8002232:	2080      	movs	r0, #128	; 0x80
 8002234:	f7ff fefc 	bl	8002030 <lcd_send_cmd>
	int zmienna = Temp;
	sprintf (str, "TEMP: %iC", zmienna);
 8002238:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800223c:	4906      	ldr	r1, [pc, #24]	; (8002258 <Display_Temp+0x3c>)
 800223e:	ee17 2a90 	vmov	r2, s15
 8002242:	4668      	mov	r0, sp
 8002244:	f000 fb00 	bl	8002848 <siprintf>
	lcd_send_string(str);
 8002248:	4668      	mov	r0, sp
 800224a:	f7ff ff7c 	bl	8002146 <lcd_send_string>
}
 800224e:	b005      	add	sp, #20
 8002250:	ecbd 8b02 	vpop	{d8}
 8002254:	f85d fb04 	ldr.w	pc, [sp], #4
 8002258:	080030a5 	.word	0x080030a5

0800225c <Display_Rh>:

void Display_Rh (float Rh)
{
 800225c:	b500      	push	{lr}
 800225e:	ed2d 8b02 	vpush	{d8}
 8002262:	b085      	sub	sp, #20
	char str[16] = {0};
 8002264:	2210      	movs	r2, #16
 8002266:	2100      	movs	r1, #0
 8002268:	4668      	mov	r0, sp
{
 800226a:	eeb0 8a40 	vmov.f32	s16, s0
	char str[16] = {0};
 800226e:	f000 fae3 	bl	8002838 <memset>
	lcd_send_cmd (0x80|0x40);
 8002272:	20c0      	movs	r0, #192	; 0xc0
 8002274:	f7ff fedc 	bl	8002030 <lcd_send_cmd>
	int zmienna = Rh;
	sprintf (str, "RH: %i%%", zmienna);
 8002278:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <Display_Rh+0x3c>)
 800227e:	ee17 2a90 	vmov	r2, s15
 8002282:	4668      	mov	r0, sp
 8002284:	f000 fae0 	bl	8002848 <siprintf>
	lcd_send_string(str);
 8002288:	4668      	mov	r0, sp
 800228a:	f7ff ff5c 	bl	8002146 <lcd_send_string>
}
 800228e:	b005      	add	sp, #20
 8002290:	ecbd 8b02 	vpop	{d8}
 8002294:	f85d fb04 	ldr.w	pc, [sp], #4
 8002298:	0800309c 	.word	0x0800309c

0800229c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229c:	b530      	push	{r4, r5, lr}
 800229e:	b087      	sub	sp, #28
 80022a0:	4604      	mov	r4, r0
 80022a2:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	2214      	movs	r2, #20
 80022a6:	2100      	movs	r1, #0
 80022a8:	a801      	add	r0, sp, #4
 80022aa:	f000 fac5 	bl	8002838 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022b0:	a901      	add	r1, sp, #4
 80022b2:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 80022b4:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022b8:	f7fe fff0 	bl	800129c <HAL_GPIO_Init>
}
 80022bc:	b007      	add	sp, #28
 80022be:	bd30      	pop	{r4, r5, pc}

080022c0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b530      	push	{r4, r5, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	2214      	movs	r2, #20
 80022ca:	2100      	movs	r1, #0
 80022cc:	a801      	add	r0, sp, #4
 80022ce:	f000 fab3 	bl	8002838 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d2:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022d4:	a901      	add	r1, sp, #4
 80022d6:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 80022d8:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022da:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022dc:	f7fe ffde 	bl	800129c <HAL_GPIO_Init>
}
 80022e0:	b007      	add	sp, #28
 80022e2:	bd30      	pop	{r4, r5, pc}

080022e4 <DHT22_Start>:

void DHT22_Start (void)
{
 80022e4:	b510      	push	{r4, lr}
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 80022e6:	4c0e      	ldr	r4, [pc, #56]	; (8002320 <DHT22_Start+0x3c>)
 80022e8:	2108      	movs	r1, #8
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff ffd6 	bl	800229c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 80022f0:	2200      	movs	r2, #0
 80022f2:	2108      	movs	r1, #8
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff f8a5 	bl	8001444 <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 80022fa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80022fe:	f7ff ff83 	bl	8002208 <delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8002302:	2108      	movs	r1, #8
 8002304:	4620      	mov	r0, r4
 8002306:	2201      	movs	r2, #1
 8002308:	f7ff f89c 	bl	8001444 <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 800230c:	2014      	movs	r0, #20
 800230e:	f7ff ff7b 	bl	8002208 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8002312:	4620      	mov	r0, r4
 8002314:	2108      	movs	r1, #8
}
 8002316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 800231a:	f7ff bfd1 	b.w	80022c0 <Set_Pin_Input>
 800231e:	bf00      	nop
 8002320:	40020000 	.word	0x40020000

08002324 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8002324:	b538      	push	{r3, r4, r5, lr}
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8002326:	2108      	movs	r1, #8
 8002328:	4810      	ldr	r0, [pc, #64]	; (800236c <DHT22_Check_Response+0x48>)
 800232a:	f7ff ffc9 	bl	80022c0 <Set_Pin_Input>
	uint8_t Response = 0;
	delay (40);  // wait for 40us
 800232e:	2028      	movs	r0, #40	; 0x28
 8002330:	f7ff ff6a 	bl	8002208 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8002334:	2108      	movs	r1, #8
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <DHT22_Check_Response+0x48>)
 8002338:	f7ff f87e 	bl	8001438 <HAL_GPIO_ReadPin>
 800233c:	b998      	cbnz	r0, 8002366 <DHT22_Check_Response+0x42>
	{
		delay (80);   // wait for 80us
 800233e:	2050      	movs	r0, #80	; 0x50
 8002340:	f7ff ff62 	bl	8002208 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8002344:	2108      	movs	r1, #8
 8002346:	4809      	ldr	r0, [pc, #36]	; (800236c <DHT22_Check_Response+0x48>)
 8002348:	f7ff f876 	bl	8001438 <HAL_GPIO_ReadPin>
		else Response = -1;
 800234c:	2800      	cmp	r0, #0
 800234e:	bf14      	ite	ne
 8002350:	2401      	movne	r4, #1
 8002352:	24ff      	moveq	r4, #255	; 0xff
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8002354:	4d05      	ldr	r5, [pc, #20]	; (800236c <DHT22_Check_Response+0x48>)
 8002356:	2108      	movs	r1, #8
 8002358:	4628      	mov	r0, r5
 800235a:	f7ff f86d 	bl	8001438 <HAL_GPIO_ReadPin>
 800235e:	2800      	cmp	r0, #0
 8002360:	d1f9      	bne.n	8002356 <DHT22_Check_Response+0x32>
	return Response;
}
 8002362:	4620      	mov	r0, r4
 8002364:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t Response = 0;
 8002366:	2400      	movs	r4, #0
 8002368:	e7f4      	b.n	8002354 <DHT22_Check_Response+0x30>
 800236a:	bf00      	nop
 800236c:	40020000 	.word	0x40020000

08002370 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8002370:	b570      	push	{r4, r5, r6, lr}
	uint8_t i=0,j;
	for (j=0;j<8;j++)
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8002372:	4e11      	ldr	r6, [pc, #68]	; (80023b8 <DHT22_Read+0x48>)
{
 8002374:	2507      	movs	r5, #7
	uint8_t i=0,j;
 8002376:	2400      	movs	r4, #0
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8002378:	2108      	movs	r1, #8
 800237a:	4630      	mov	r0, r6
 800237c:	f7ff f85c 	bl	8001438 <HAL_GPIO_ReadPin>
 8002380:	2800      	cmp	r0, #0
 8002382:	d0f9      	beq.n	8002378 <DHT22_Read+0x8>
		delay (40);   // wait for 40 us
 8002384:	2028      	movs	r0, #40	; 0x28
 8002386:	f7ff ff3f 	bl	8002208 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 800238a:	2108      	movs	r1, #8
 800238c:	4630      	mov	r0, r6
 800238e:	f7ff f853 	bl	8001438 <HAL_GPIO_ReadPin>
 8002392:	2301      	movs	r3, #1
		{
			i&= ~(1<<(7-j));   // write 0
 8002394:	40ab      	lsls	r3, r5
		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8002396:	b960      	cbnz	r0, 80023b2 <DHT22_Read+0x42>
			i&= ~(1<<(7-j));   // write 0
 8002398:	ea24 0403 	bic.w	r4, r4, r3
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 800239c:	2108      	movs	r1, #8
 800239e:	4630      	mov	r0, r6
 80023a0:	f7ff f84a 	bl	8001438 <HAL_GPIO_ReadPin>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d1f9      	bne.n	800239c <DHT22_Read+0x2c>
	for (j=0;j<8;j++)
 80023a8:	f115 35ff 	adds.w	r5, r5, #4294967295
 80023ac:	d2e4      	bcs.n	8002378 <DHT22_Read+0x8>
	}

	return i;
}
 80023ae:	4620      	mov	r0, r4
 80023b0:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80023b2:	431c      	orrs	r4, r3
 80023b4:	b2e4      	uxtb	r4, r4
 80023b6:	e7f1      	b.n	800239c <DHT22_Read+0x2c>
 80023b8:	40020000 	.word	0x40020000

080023bc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023bc:	b530      	push	{r4, r5, lr}
	PomiarADC = HAL_ADC_GetValue(&hadc1); //pobieranie zmierzonej wartosci
 80023be:	4c20      	ldr	r4, [pc, #128]	; (8002440 <HAL_ADC_ConvCpltCallback+0x84>)
	Vsense = (SupplyVoltage*PomiarADC)/(ADCResolution-1); //przeliczenie wartosci zmierzonej na napieciu
	wilg_gleby = ((Vsense-V25)/Avg_slope)+21; //obliczenie wilgotnosci
 80023c0:	4d20      	ldr	r5, [pc, #128]	; (8002444 <HAL_ADC_ConvCpltCallback+0x88>)
{
 80023c2:	b085      	sub	sp, #20
	PomiarADC = HAL_ADC_GetValue(&hadc1); //pobieranie zmierzonej wartosci
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7fe fe67 	bl	8001098 <HAL_ADC_GetValue>
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <HAL_ADC_ConvCpltCallback+0x8c>)
	Vsense = (SupplyVoltage*PomiarADC)/(ADCResolution-1); //przeliczenie wartosci zmierzonej na napieciu
 80023cc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800244c <HAL_ADC_ConvCpltCallback+0x90>
	PomiarADC = HAL_ADC_GetValue(&hadc1); //pobieranie zmierzonej wartosci
 80023d0:	8018      	strh	r0, [r3, #0]
	Vsense = (SupplyVoltage*PomiarADC)/(ADCResolution-1); //przeliczenie wartosci zmierzonej na napieciu
 80023d2:	b283      	uxth	r3, r0
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023dc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_ADC_ConvCpltCallback+0x94>)
 80023e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	char str[16] = {0};
 80023ea:	2210      	movs	r2, #16
 80023ec:	2100      	movs	r1, #0
 80023ee:	4668      	mov	r0, sp
	wilg_gleby = ((Vsense-V25)/Avg_slope)+21; //obliczenie wilgotnosci
 80023f0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002454 <HAL_ADC_ConvCpltCallback+0x98>
	Vsense = (SupplyVoltage*PomiarADC)/(ADCResolution-1); //przeliczenie wartosci zmierzonej na napieciu
 80023f4:	ed83 7a00 	vstr	s14, [r3]
	wilg_gleby = ((Vsense-V25)/Avg_slope)+21; //obliczenie wilgotnosci
 80023f8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002458 <HAL_ADC_ConvCpltCallback+0x9c>
 80023fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002404:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800240c:	edc5 7a00 	vstr	s15, [r5]
	char str[16] = {0};
 8002410:	f000 fa12 	bl	8002838 <memset>
    lcd_send_cmd (0x80|0x00);
 8002414:	2080      	movs	r0, #128	; 0x80
 8002416:	f7ff fe0b 	bl	8002030 <lcd_send_cmd>
	int zmienna = wilg_gleby;
 800241a:	edd5 7a00 	vldr	s15, [r5]
	sprintf (str, "Wilg: %i%%", zmienna);
 800241e:	490f      	ldr	r1, [pc, #60]	; (800245c <HAL_ADC_ConvCpltCallback+0xa0>)
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	4668      	mov	r0, sp
 8002426:	ee17 2a90 	vmov	r2, s15
 800242a:	f000 fa0d 	bl	8002848 <siprintf>
	lcd_send_string(str);
 800242e:	4668      	mov	r0, sp
 8002430:	f7ff fe89 	bl	8002146 <lcd_send_string>
	HAL_ADC_Start(&hadc1);
 8002434:	4620      	mov	r0, r4
 8002436:	f7fe fdcf 	bl	8000fd8 <HAL_ADC_Start>
}
 800243a:	b005      	add	sp, #20
 800243c:	bd30      	pop	{r4, r5, pc}
 800243e:	bf00      	nop
 8002440:	200000b0 	.word	0x200000b0
 8002444:	2000009c 	.word	0x2000009c
 8002448:	2000014c 	.word	0x2000014c
 800244c:	457ff000 	.word	0x457ff000
 8002450:	20000098 	.word	0x20000098
 8002454:	3f1eb852 	.word	0x3f1eb852
 8002458:	3cf5c28f 	.word	0x3cf5c28f
 800245c:	080030af 	.word	0x080030af

08002460 <MX_TIM10_Init>:

void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8002460:	4807      	ldr	r0, [pc, #28]	; (8002480 <MX_TIM10_Init+0x20>)
  htim10.Init.Prescaler = 72-1;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <MX_TIM10_Init+0x24>)
 8002464:	f04f 0c47 	mov.w	ip, #71	; 0x47
 8002468:	e880 1008 	stmia.w	r0, {r3, ip}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 0xffff-1;
 800246c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	2300      	movs	r3, #0
 8002472:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 0xffff-1;
 8002474:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002478:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800247a:	f7ff bd25 	b.w	8001ec8 <HAL_TIM_Base_Init>
 800247e:	bf00      	nop
 8002480:	2000015c 	.word	0x2000015c
 8002484:	40014400 	.word	0x40014400

08002488 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8002488:	b530      	push	{r4, r5, lr}
 800248a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248c:	2230      	movs	r2, #48	; 0x30
 800248e:	2100      	movs	r1, #0
 8002490:	a808      	add	r0, sp, #32
 8002492:	f000 f9d1 	bl	8002838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002496:	2100      	movs	r1, #0
 8002498:	2214      	movs	r2, #20
 800249a:	a803      	add	r0, sp, #12
 800249c:	f000 f9cc 	bl	8002838 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	2400      	movs	r4, #0
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <SystemClock_Config+0x88>)
 80024a4:	9401      	str	r4, [sp, #4]
 80024a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <SystemClock_Config+0x8c>)
 80024ba:	9402      	str	r4, [sp, #8]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ce:	2301      	movs	r3, #1
 80024d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024dc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
 80024de:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024e0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024e4:	2304      	movs	r3, #4
 80024e6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80024e8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024ea:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ec:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ee:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f0:	f7ff fa0a 	bl	8001908 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f4:	230f      	movs	r3, #15
 80024f6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024f8:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024fe:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002500:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002502:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002504:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002506:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002508:	f7ff fbd2 	bl	8001cb0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800250c:	b015      	add	sp, #84	; 0x54
 800250e:	bd30      	pop	{r4, r5, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	40007000 	.word	0x40007000

08002518 <main>:
{
 8002518:	e92d 4887 	stmdb	sp!, {r0, r1, r2, r7, fp, lr}
  HAL_Init();
 800251c:	f7fe fc76 	bl	8000e0c <HAL_Init>
  SystemClock_Config();
 8002520:	f7ff ffb2 	bl	8002488 <SystemClock_Config>
  MX_GPIO_Init();
 8002524:	f7ff fd50 	bl	8001fc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002528:	f7ff fe16 	bl	8002158 <MX_I2C1_Init>
  MX_ADC1_Init();
 800252c:	f7ff fce6 	bl	8001efc <MX_ADC1_Init>
  MX_TIM10_Init();
 8002530:	f7ff ff96 	bl	8002460 <MX_TIM10_Init>
  HAL_TIM_Base_Start(&htim10);
 8002534:	484f      	ldr	r0, [pc, #316]	; (8002674 <main+0x15c>)
  Presence=0;
 8002536:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80026b4 <main+0x19c>
  Rh_byte1=0;
 800253a:	4d4f      	ldr	r5, [pc, #316]	; (8002678 <main+0x160>)
  Rh_byte2=0;
 800253c:	4c4f      	ldr	r4, [pc, #316]	; (800267c <main+0x164>)
  Temp_byte1=0;
 800253e:	4f50      	ldr	r7, [pc, #320]	; (8002680 <main+0x168>)
  Temp_byte2=0;
 8002540:	4e50      	ldr	r6, [pc, #320]	; (8002684 <main+0x16c>)
	  lcd_send_string("Temperatura przy");
 8002542:	f8df b174 	ldr.w	fp, [pc, #372]	; 80026b8 <main+0x1a0>
  HAL_TIM_Base_Start(&htim10);
 8002546:	f7ff fc5f 	bl	8001e08 <HAL_TIM_Base_Start>
  lcd_init();
 800254a:	f7ff fdc0 	bl	80020ce <lcd_init>
  lcd_send_cmd (0x80|0x00);
 800254e:	2080      	movs	r0, #128	; 0x80
 8002550:	f7ff fd6e 	bl	8002030 <lcd_send_cmd>
  lcd_send_string("Wykonane przez:");
 8002554:	484c      	ldr	r0, [pc, #304]	; (8002688 <main+0x170>)
 8002556:	f7ff fdf6 	bl	8002146 <lcd_send_string>
  lcd_send_cmd (0x80|0x40);
 800255a:	20c0      	movs	r0, #192	; 0xc0
 800255c:	f7ff fd68 	bl	8002030 <lcd_send_cmd>
  lcd_send_string("Piotr Otta 18902");
 8002560:	484a      	ldr	r0, [pc, #296]	; (800268c <main+0x174>)
 8002562:	f7ff fdf0 	bl	8002146 <lcd_send_string>
  HAL_Delay(2000);
 8002566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800256a:	f7fe fc7b 	bl	8000e64 <HAL_Delay>
  lcd_clear ();
 800256e:	f7ff fda3 	bl	80020b8 <lcd_clear>
  Presence=0;
 8002572:	2300      	movs	r3, #0
  HAL_ADC_Start(&hadc1); //uruchomienie przetwornika analogowo-cyfrowego
 8002574:	4846      	ldr	r0, [pc, #280]	; (8002690 <main+0x178>)
  Presence=0;
 8002576:	f889 3000 	strb.w	r3, [r9]
  Rh_byte1=0;
 800257a:	702b      	strb	r3, [r5, #0]
  Rh_byte2=0;
 800257c:	7023      	strb	r3, [r4, #0]
  Temp_byte1=0;
 800257e:	703b      	strb	r3, [r7, #0]
  Temp_byte2=0;
 8002580:	7033      	strb	r3, [r6, #0]
  HAL_ADC_Start(&hadc1); //uruchomienie przetwornika analogowo-cyfrowego
 8002582:	f7fe fd29 	bl	8000fd8 <HAL_ADC_Start>
	  lcd_send_cmd (0x80|0x00);
 8002586:	2080      	movs	r0, #128	; 0x80
 8002588:	f7ff fd52 	bl	8002030 <lcd_send_cmd>
	  lcd_send_string("Temperatura przy");
 800258c:	4658      	mov	r0, fp
 800258e:	f7ff fdda 	bl	8002146 <lcd_send_string>
	  lcd_send_cmd (0x80|0x40);
 8002592:	20c0      	movs	r0, #192	; 0xc0
 8002594:	f7ff fd4c 	bl	8002030 <lcd_send_cmd>
	  lcd_send_string("pojemniku gleby");
 8002598:	483e      	ldr	r0, [pc, #248]	; (8002694 <main+0x17c>)
	  Humidity = (float) (RH/10.0);
 800259a:	f8df a120 	ldr.w	sl, [pc, #288]	; 80026bc <main+0x1a4>
	  lcd_send_string("pojemniku gleby");
 800259e:	f7ff fdd2 	bl	8002146 <lcd_send_string>
	  HAL_Delay(1400);
 80025a2:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80025a6:	f7fe fc5d 	bl	8000e64 <HAL_Delay>
	  lcd_clear ();
 80025aa:	f7ff fd85 	bl	80020b8 <lcd_clear>
	  DHT22_Start();
 80025ae:	f7ff fe99 	bl	80022e4 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 80025b2:	f7ff feb7 	bl	8002324 <DHT22_Check_Response>
 80025b6:	f889 0000 	strb.w	r0, [r9]
	  Rh_byte1 = DHT22_Read ();
 80025ba:	f7ff fed9 	bl	8002370 <DHT22_Read>
 80025be:	7028      	strb	r0, [r5, #0]
	  Rh_byte2 = DHT22_Read ();
 80025c0:	f7ff fed6 	bl	8002370 <DHT22_Read>
 80025c4:	7020      	strb	r0, [r4, #0]
	  Temp_byte1 = DHT22_Read ();
 80025c6:	f7ff fed3 	bl	8002370 <DHT22_Read>
 80025ca:	7038      	strb	r0, [r7, #0]
	  Temp_byte2 = DHT22_Read ();
 80025cc:	f7ff fed0 	bl	8002370 <DHT22_Read>
 80025d0:	7030      	strb	r0, [r6, #0]
	  SUM = DHT22_Read();
 80025d2:	f7ff fecd 	bl	8002370 <DHT22_Read>
 80025d6:	4b30      	ldr	r3, [pc, #192]	; (8002698 <main+0x180>)
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 80025d8:	f894 8000 	ldrb.w	r8, [r4]
	  SUM = DHT22_Read();
 80025dc:	8018      	strh	r0, [r3, #0]
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80025de:	783b      	ldrb	r3, [r7, #0]
 80025e0:	7830      	ldrb	r0, [r6, #0]
 80025e2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <main+0x184>)
 80025e8:	8018      	strh	r0, [r3, #0]
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 80025ea:	782b      	ldrb	r3, [r5, #0]
 80025ec:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <main+0x188>)
 80025f2:	f8a3 8000 	strh.w	r8, [r3]
	  Temperature = (float) (TEMP/10.0);
 80025f6:	f7fd ff95 	bl	8000524 <__aeabi_i2d>
 80025fa:	2200      	movs	r2, #0
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <main+0x18c>)
 80025fe:	f7fe f921 	bl	8000844 <__aeabi_ddiv>
 8002602:	f7fe fa07 	bl	8000a14 <__aeabi_d2f>
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <main+0x190>)
 8002608:	9001      	str	r0, [sp, #4]
 800260a:	6018      	str	r0, [r3, #0]
	  Humidity = (float) (RH/10.0);
 800260c:	4640      	mov	r0, r8
 800260e:	f7fd ff89 	bl	8000524 <__aeabi_i2d>
 8002612:	2200      	movs	r2, #0
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <main+0x18c>)
 8002616:	f7fe f915 	bl	8000844 <__aeabi_ddiv>
 800261a:	f7fe f9fb 	bl	8000a14 <__aeabi_d2f>
	  Display_Temp(Temperature);
 800261e:	ed9d 0a01 	vldr	s0, [sp, #4]
	  Humidity = (float) (RH/10.0);
 8002622:	f8ca 0000 	str.w	r0, [sl]
	  Display_Temp(Temperature);
 8002626:	f7ff fdf9 	bl	800221c <Display_Temp>
	  Display_Rh(Humidity);
 800262a:	ed9a 0a00 	vldr	s0, [sl]
 800262e:	f7ff fe15 	bl	800225c <Display_Rh>
	  HAL_Delay(3000);
 8002632:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002636:	f7fe fc15 	bl	8000e64 <HAL_Delay>
	  lcd_clear ();
 800263a:	f7ff fd3d 	bl	80020b8 <lcd_clear>
	  lcd_send_cmd (0x80|0x00);
 800263e:	2080      	movs	r0, #128	; 0x80
 8002640:	f7ff fcf6 	bl	8002030 <lcd_send_cmd>
	  lcd_send_string("Wilgotnosc gleby");
 8002644:	4819      	ldr	r0, [pc, #100]	; (80026ac <main+0x194>)
 8002646:	f7ff fd7e 	bl	8002146 <lcd_send_string>
	  lcd_send_cmd (0x80|0x40);
 800264a:	20c0      	movs	r0, #192	; 0xc0
 800264c:	f7ff fcf0 	bl	8002030 <lcd_send_cmd>
	  lcd_send_string("  w pojemniku   ");
 8002650:	4817      	ldr	r0, [pc, #92]	; (80026b0 <main+0x198>)
 8002652:	f7ff fd78 	bl	8002146 <lcd_send_string>
	  HAL_Delay(1400);
 8002656:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800265a:	f7fe fc03 	bl	8000e64 <HAL_Delay>
	  lcd_clear ();
 800265e:	f7ff fd2b 	bl	80020b8 <lcd_clear>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8002662:	480b      	ldr	r0, [pc, #44]	; (8002690 <main+0x178>)
 8002664:	f7ff feaa 	bl	80023bc <HAL_ADC_ConvCpltCallback>
	  HAL_Delay(3000);
 8002668:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800266c:	f7fe fbfa 	bl	8000e64 <HAL_Delay>
 8002670:	e789      	b.n	8002586 <main+0x6e>
 8002672:	bf00      	nop
 8002674:	2000015c 	.word	0x2000015c
 8002678:	2000014e 	.word	0x2000014e
 800267c:	20000155 	.word	0x20000155
 8002680:	20000154 	.word	0x20000154
 8002684:	20000158 	.word	0x20000158
 8002688:	080030ba 	.word	0x080030ba
 800268c:	080030ca 	.word	0x080030ca
 8002690:	200000b0 	.word	0x200000b0
 8002694:	080030ec 	.word	0x080030ec
 8002698:	20000156 	.word	0x20000156
 800269c:	20000152 	.word	0x20000152
 80026a0:	20000150 	.word	0x20000150
 80026a4:	40240000 	.word	0x40240000
 80026a8:	20000094 	.word	0x20000094
 80026ac:	080030fc 	.word	0x080030fc
 80026b0:	0800310d 	.word	0x0800310d
 80026b4:	20000090 	.word	0x20000090
 80026b8:	080030db 	.word	0x080030db
 80026bc:	2000008c 	.word	0x2000008c

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_MspInit+0x34>)
 80026c8:	2100      	movs	r1, #0
 80026ca:	9100      	str	r1, [sp, #0]
 80026cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
 80026d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80026da:	9200      	str	r2, [sp, #0]
 80026dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	9101      	str	r1, [sp, #4]
 80026e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	b002      	add	sp, #8
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <NMI_Handler>:
 80026fc:	4770      	bx	lr

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	e7fe      	b.n	80026fe <HardFault_Handler>

08002700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002700:	e7fe      	b.n	8002700 <MemManage_Handler>

08002702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002702:	e7fe      	b.n	8002702 <BusFault_Handler>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	e7fe      	b.n	8002704 <UsageFault_Handler>

08002706 <SVC_Handler>:
 8002706:	4770      	bx	lr

08002708 <DebugMon_Handler>:
 8002708:	4770      	bx	lr

0800270a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270a:	4770      	bx	lr

0800270c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800270c:	f7fe bb98 	b.w	8000e40 <HAL_IncTick>

08002710 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002710:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <_sbrk+0x2c>)
 8002714:	6819      	ldr	r1, [r3, #0]
{
 8002716:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002718:	b909      	cbnz	r1, 800271e <_sbrk+0xe>
		heap_end = &end;
 800271a:	4909      	ldr	r1, [pc, #36]	; (8002740 <_sbrk+0x30>)
 800271c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800271e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002720:	4669      	mov	r1, sp
 8002722:	4402      	add	r2, r0
 8002724:	428a      	cmp	r2, r1
 8002726:	d906      	bls.n	8002736 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002728:	f000 f85c 	bl	80027e4 <__errno>
 800272c:	230c      	movs	r3, #12
 800272e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002736:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002738:	bd08      	pop	{r3, pc}
 800273a:	bf00      	nop
 800273c:	200000a0 	.word	0x200000a0
 8002740:	200001a0 	.word	0x200001a0

08002744 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SystemInit+0x18>)
 8002746:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800274a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800274e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM10)
 8002760:	6802      	ldr	r2, [r0, #0]
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_TIM_Base_MspInit+0x28>)
 8002764:	429a      	cmp	r2, r3
{
 8002766:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM10)
 8002768:	d10b      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_TIM_Base_MspInit+0x2c>)
 8002770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002772:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002782:	b002      	add	sp, #8
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40014400 	.word	0x40014400
 800278c:	40023800 	.word	0x40023800

08002790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002794:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002796:	e003      	b.n	80027a0 <LoopCopyDataInit>

08002798 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800279a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800279c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800279e:	3104      	adds	r1, #4

080027a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027a0:	480b      	ldr	r0, [pc, #44]	; (80027d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027a8:	d3f6      	bcc.n	8002798 <CopyDataInit>
  ldr  r2, =_sbss
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027ac:	e002      	b.n	80027b4 <LoopFillZerobss>

080027ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027b0:	f842 3b04 	str.w	r3, [r2], #4

080027b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027b8:	d3f9      	bcc.n	80027ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ba:	f7ff ffc3 	bl	8002744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027be:	f000 f817 	bl	80027f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c2:	f7ff fea9 	bl	8002518 <main>
  bx  lr    
 80027c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027cc:	0800317c 	.word	0x0800317c
  ldr  r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80027d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80027dc:	200001a0 	.word	0x200001a0

080027e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC_IRQHandler>
	...

080027e4 <__errno>:
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <__errno+0x8>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	2000000c 	.word	0x2000000c

080027f0 <__libc_init_array>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	4e0d      	ldr	r6, [pc, #52]	; (8002828 <__libc_init_array+0x38>)
 80027f4:	4c0d      	ldr	r4, [pc, #52]	; (800282c <__libc_init_array+0x3c>)
 80027f6:	1ba4      	subs	r4, r4, r6
 80027f8:	10a4      	asrs	r4, r4, #2
 80027fa:	2500      	movs	r5, #0
 80027fc:	42a5      	cmp	r5, r4
 80027fe:	d109      	bne.n	8002814 <__libc_init_array+0x24>
 8002800:	4e0b      	ldr	r6, [pc, #44]	; (8002830 <__libc_init_array+0x40>)
 8002802:	4c0c      	ldr	r4, [pc, #48]	; (8002834 <__libc_init_array+0x44>)
 8002804:	f000 fc3e 	bl	8003084 <_init>
 8002808:	1ba4      	subs	r4, r4, r6
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	2500      	movs	r5, #0
 800280e:	42a5      	cmp	r5, r4
 8002810:	d105      	bne.n	800281e <__libc_init_array+0x2e>
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002818:	4798      	blx	r3
 800281a:	3501      	adds	r5, #1
 800281c:	e7ee      	b.n	80027fc <__libc_init_array+0xc>
 800281e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002822:	4798      	blx	r3
 8002824:	3501      	adds	r5, #1
 8002826:	e7f2      	b.n	800280e <__libc_init_array+0x1e>
 8002828:	08003174 	.word	0x08003174
 800282c:	08003174 	.word	0x08003174
 8002830:	08003174 	.word	0x08003174
 8002834:	08003178 	.word	0x08003178

08002838 <memset>:
 8002838:	4402      	add	r2, r0
 800283a:	4603      	mov	r3, r0
 800283c:	4293      	cmp	r3, r2
 800283e:	d100      	bne.n	8002842 <memset+0xa>
 8002840:	4770      	bx	lr
 8002842:	f803 1b01 	strb.w	r1, [r3], #1
 8002846:	e7f9      	b.n	800283c <memset+0x4>

08002848 <siprintf>:
 8002848:	b40e      	push	{r1, r2, r3}
 800284a:	b500      	push	{lr}
 800284c:	b09c      	sub	sp, #112	; 0x70
 800284e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002852:	ab1d      	add	r3, sp, #116	; 0x74
 8002854:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002858:	9002      	str	r0, [sp, #8]
 800285a:	9006      	str	r0, [sp, #24]
 800285c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002860:	480a      	ldr	r0, [pc, #40]	; (800288c <siprintf+0x44>)
 8002862:	9104      	str	r1, [sp, #16]
 8002864:	9107      	str	r1, [sp, #28]
 8002866:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800286a:	f853 2b04 	ldr.w	r2, [r3], #4
 800286e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002872:	6800      	ldr	r0, [r0, #0]
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	a902      	add	r1, sp, #8
 8002878:	f000 f866 	bl	8002948 <_svfiprintf_r>
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	b01c      	add	sp, #112	; 0x70
 8002884:	f85d eb04 	ldr.w	lr, [sp], #4
 8002888:	b003      	add	sp, #12
 800288a:	4770      	bx	lr
 800288c:	2000000c 	.word	0x2000000c

08002890 <__ssputs_r>:
 8002890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002894:	688e      	ldr	r6, [r1, #8]
 8002896:	429e      	cmp	r6, r3
 8002898:	4682      	mov	sl, r0
 800289a:	460c      	mov	r4, r1
 800289c:	4691      	mov	r9, r2
 800289e:	4698      	mov	r8, r3
 80028a0:	d835      	bhi.n	800290e <__ssputs_r+0x7e>
 80028a2:	898a      	ldrh	r2, [r1, #12]
 80028a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028a8:	d031      	beq.n	800290e <__ssputs_r+0x7e>
 80028aa:	6825      	ldr	r5, [r4, #0]
 80028ac:	6909      	ldr	r1, [r1, #16]
 80028ae:	1a6f      	subs	r7, r5, r1
 80028b0:	6965      	ldr	r5, [r4, #20]
 80028b2:	2302      	movs	r3, #2
 80028b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80028bc:	f108 0301 	add.w	r3, r8, #1
 80028c0:	443b      	add	r3, r7
 80028c2:	429d      	cmp	r5, r3
 80028c4:	bf38      	it	cc
 80028c6:	461d      	movcc	r5, r3
 80028c8:	0553      	lsls	r3, r2, #21
 80028ca:	d531      	bpl.n	8002930 <__ssputs_r+0xa0>
 80028cc:	4629      	mov	r1, r5
 80028ce:	f000 fb39 	bl	8002f44 <_malloc_r>
 80028d2:	4606      	mov	r6, r0
 80028d4:	b950      	cbnz	r0, 80028ec <__ssputs_r+0x5c>
 80028d6:	230c      	movs	r3, #12
 80028d8:	f8ca 3000 	str.w	r3, [sl]
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ec:	463a      	mov	r2, r7
 80028ee:	6921      	ldr	r1, [r4, #16]
 80028f0:	f000 fab4 	bl	8002e5c <memcpy>
 80028f4:	89a3      	ldrh	r3, [r4, #12]
 80028f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fe:	81a3      	strh	r3, [r4, #12]
 8002900:	6126      	str	r6, [r4, #16]
 8002902:	6165      	str	r5, [r4, #20]
 8002904:	443e      	add	r6, r7
 8002906:	1bed      	subs	r5, r5, r7
 8002908:	6026      	str	r6, [r4, #0]
 800290a:	60a5      	str	r5, [r4, #8]
 800290c:	4646      	mov	r6, r8
 800290e:	4546      	cmp	r6, r8
 8002910:	bf28      	it	cs
 8002912:	4646      	movcs	r6, r8
 8002914:	4632      	mov	r2, r6
 8002916:	4649      	mov	r1, r9
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	f000 faaa 	bl	8002e72 <memmove>
 800291e:	68a3      	ldr	r3, [r4, #8]
 8002920:	1b9b      	subs	r3, r3, r6
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	441e      	add	r6, r3
 8002928:	6026      	str	r6, [r4, #0]
 800292a:	2000      	movs	r0, #0
 800292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002930:	462a      	mov	r2, r5
 8002932:	f000 fb65 	bl	8003000 <_realloc_r>
 8002936:	4606      	mov	r6, r0
 8002938:	2800      	cmp	r0, #0
 800293a:	d1e1      	bne.n	8002900 <__ssputs_r+0x70>
 800293c:	6921      	ldr	r1, [r4, #16]
 800293e:	4650      	mov	r0, sl
 8002940:	f000 fab2 	bl	8002ea8 <_free_r>
 8002944:	e7c7      	b.n	80028d6 <__ssputs_r+0x46>
	...

08002948 <_svfiprintf_r>:
 8002948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294c:	b09d      	sub	sp, #116	; 0x74
 800294e:	4680      	mov	r8, r0
 8002950:	9303      	str	r3, [sp, #12]
 8002952:	898b      	ldrh	r3, [r1, #12]
 8002954:	061c      	lsls	r4, r3, #24
 8002956:	460d      	mov	r5, r1
 8002958:	4616      	mov	r6, r2
 800295a:	d50f      	bpl.n	800297c <_svfiprintf_r+0x34>
 800295c:	690b      	ldr	r3, [r1, #16]
 800295e:	b96b      	cbnz	r3, 800297c <_svfiprintf_r+0x34>
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	f000 faef 	bl	8002f44 <_malloc_r>
 8002966:	6028      	str	r0, [r5, #0]
 8002968:	6128      	str	r0, [r5, #16]
 800296a:	b928      	cbnz	r0, 8002978 <_svfiprintf_r+0x30>
 800296c:	230c      	movs	r3, #12
 800296e:	f8c8 3000 	str.w	r3, [r8]
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	e0c5      	b.n	8002b04 <_svfiprintf_r+0x1bc>
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	616b      	str	r3, [r5, #20]
 800297c:	2300      	movs	r3, #0
 800297e:	9309      	str	r3, [sp, #36]	; 0x24
 8002980:	2320      	movs	r3, #32
 8002982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002986:	2330      	movs	r3, #48	; 0x30
 8002988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800298c:	f04f 0b01 	mov.w	fp, #1
 8002990:	4637      	mov	r7, r6
 8002992:	463c      	mov	r4, r7
 8002994:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d13c      	bne.n	8002a16 <_svfiprintf_r+0xce>
 800299c:	ebb7 0a06 	subs.w	sl, r7, r6
 80029a0:	d00b      	beq.n	80029ba <_svfiprintf_r+0x72>
 80029a2:	4653      	mov	r3, sl
 80029a4:	4632      	mov	r2, r6
 80029a6:	4629      	mov	r1, r5
 80029a8:	4640      	mov	r0, r8
 80029aa:	f7ff ff71 	bl	8002890 <__ssputs_r>
 80029ae:	3001      	adds	r0, #1
 80029b0:	f000 80a3 	beq.w	8002afa <_svfiprintf_r+0x1b2>
 80029b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029b6:	4453      	add	r3, sl
 80029b8:	9309      	str	r3, [sp, #36]	; 0x24
 80029ba:	783b      	ldrb	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 809c 	beq.w	8002afa <_svfiprintf_r+0x1b2>
 80029c2:	2300      	movs	r3, #0
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	9304      	str	r3, [sp, #16]
 80029ca:	9307      	str	r3, [sp, #28]
 80029cc:	9205      	str	r2, [sp, #20]
 80029ce:	9306      	str	r3, [sp, #24]
 80029d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029d4:	931a      	str	r3, [sp, #104]	; 0x68
 80029d6:	2205      	movs	r2, #5
 80029d8:	7821      	ldrb	r1, [r4, #0]
 80029da:	4850      	ldr	r0, [pc, #320]	; (8002b1c <_svfiprintf_r+0x1d4>)
 80029dc:	f7fd fc00 	bl	80001e0 <memchr>
 80029e0:	1c67      	adds	r7, r4, #1
 80029e2:	9b04      	ldr	r3, [sp, #16]
 80029e4:	b9d8      	cbnz	r0, 8002a1e <_svfiprintf_r+0xd6>
 80029e6:	06d9      	lsls	r1, r3, #27
 80029e8:	bf44      	itt	mi
 80029ea:	2220      	movmi	r2, #32
 80029ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029f0:	071a      	lsls	r2, r3, #28
 80029f2:	bf44      	itt	mi
 80029f4:	222b      	movmi	r2, #43	; 0x2b
 80029f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029fa:	7822      	ldrb	r2, [r4, #0]
 80029fc:	2a2a      	cmp	r2, #42	; 0x2a
 80029fe:	d016      	beq.n	8002a2e <_svfiprintf_r+0xe6>
 8002a00:	9a07      	ldr	r2, [sp, #28]
 8002a02:	2100      	movs	r1, #0
 8002a04:	200a      	movs	r0, #10
 8002a06:	4627      	mov	r7, r4
 8002a08:	3401      	adds	r4, #1
 8002a0a:	783b      	ldrb	r3, [r7, #0]
 8002a0c:	3b30      	subs	r3, #48	; 0x30
 8002a0e:	2b09      	cmp	r3, #9
 8002a10:	d951      	bls.n	8002ab6 <_svfiprintf_r+0x16e>
 8002a12:	b1c9      	cbz	r1, 8002a48 <_svfiprintf_r+0x100>
 8002a14:	e011      	b.n	8002a3a <_svfiprintf_r+0xf2>
 8002a16:	2b25      	cmp	r3, #37	; 0x25
 8002a18:	d0c0      	beq.n	800299c <_svfiprintf_r+0x54>
 8002a1a:	4627      	mov	r7, r4
 8002a1c:	e7b9      	b.n	8002992 <_svfiprintf_r+0x4a>
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <_svfiprintf_r+0x1d4>)
 8002a20:	1a80      	subs	r0, r0, r2
 8002a22:	fa0b f000 	lsl.w	r0, fp, r0
 8002a26:	4318      	orrs	r0, r3
 8002a28:	9004      	str	r0, [sp, #16]
 8002a2a:	463c      	mov	r4, r7
 8002a2c:	e7d3      	b.n	80029d6 <_svfiprintf_r+0x8e>
 8002a2e:	9a03      	ldr	r2, [sp, #12]
 8002a30:	1d11      	adds	r1, r2, #4
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	9103      	str	r1, [sp, #12]
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	db01      	blt.n	8002a3e <_svfiprintf_r+0xf6>
 8002a3a:	9207      	str	r2, [sp, #28]
 8002a3c:	e004      	b.n	8002a48 <_svfiprintf_r+0x100>
 8002a3e:	4252      	negs	r2, r2
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	9207      	str	r2, [sp, #28]
 8002a46:	9304      	str	r3, [sp, #16]
 8002a48:	783b      	ldrb	r3, [r7, #0]
 8002a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a4c:	d10e      	bne.n	8002a6c <_svfiprintf_r+0x124>
 8002a4e:	787b      	ldrb	r3, [r7, #1]
 8002a50:	2b2a      	cmp	r3, #42	; 0x2a
 8002a52:	f107 0101 	add.w	r1, r7, #1
 8002a56:	d132      	bne.n	8002abe <_svfiprintf_r+0x176>
 8002a58:	9b03      	ldr	r3, [sp, #12]
 8002a5a:	1d1a      	adds	r2, r3, #4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	9203      	str	r2, [sp, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bfb8      	it	lt
 8002a64:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a68:	3702      	adds	r7, #2
 8002a6a:	9305      	str	r3, [sp, #20]
 8002a6c:	4c2c      	ldr	r4, [pc, #176]	; (8002b20 <_svfiprintf_r+0x1d8>)
 8002a6e:	7839      	ldrb	r1, [r7, #0]
 8002a70:	2203      	movs	r2, #3
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fd fbb4 	bl	80001e0 <memchr>
 8002a78:	b138      	cbz	r0, 8002a8a <_svfiprintf_r+0x142>
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	1b00      	subs	r0, r0, r4
 8002a7e:	fa03 f000 	lsl.w	r0, r3, r0
 8002a82:	9b04      	ldr	r3, [sp, #16]
 8002a84:	4303      	orrs	r3, r0
 8002a86:	9304      	str	r3, [sp, #16]
 8002a88:	3701      	adds	r7, #1
 8002a8a:	7839      	ldrb	r1, [r7, #0]
 8002a8c:	4825      	ldr	r0, [pc, #148]	; (8002b24 <_svfiprintf_r+0x1dc>)
 8002a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a92:	2206      	movs	r2, #6
 8002a94:	1c7e      	adds	r6, r7, #1
 8002a96:	f7fd fba3 	bl	80001e0 <memchr>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d035      	beq.n	8002b0a <_svfiprintf_r+0x1c2>
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <_svfiprintf_r+0x1e0>)
 8002aa0:	b9fb      	cbnz	r3, 8002ae2 <_svfiprintf_r+0x19a>
 8002aa2:	9b03      	ldr	r3, [sp, #12]
 8002aa4:	3307      	adds	r3, #7
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	3308      	adds	r3, #8
 8002aac:	9303      	str	r3, [sp, #12]
 8002aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab0:	444b      	add	r3, r9
 8002ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab4:	e76c      	b.n	8002990 <_svfiprintf_r+0x48>
 8002ab6:	fb00 3202 	mla	r2, r0, r2, r3
 8002aba:	2101      	movs	r1, #1
 8002abc:	e7a3      	b.n	8002a06 <_svfiprintf_r+0xbe>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9305      	str	r3, [sp, #20]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	240a      	movs	r4, #10
 8002ac6:	460f      	mov	r7, r1
 8002ac8:	3101      	adds	r1, #1
 8002aca:	783a      	ldrb	r2, [r7, #0]
 8002acc:	3a30      	subs	r2, #48	; 0x30
 8002ace:	2a09      	cmp	r2, #9
 8002ad0:	d903      	bls.n	8002ada <_svfiprintf_r+0x192>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ca      	beq.n	8002a6c <_svfiprintf_r+0x124>
 8002ad6:	9005      	str	r0, [sp, #20]
 8002ad8:	e7c8      	b.n	8002a6c <_svfiprintf_r+0x124>
 8002ada:	fb04 2000 	mla	r0, r4, r0, r2
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e7f1      	b.n	8002ac6 <_svfiprintf_r+0x17e>
 8002ae2:	ab03      	add	r3, sp, #12
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	462a      	mov	r2, r5
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <_svfiprintf_r+0x1e4>)
 8002aea:	a904      	add	r1, sp, #16
 8002aec:	4640      	mov	r0, r8
 8002aee:	f3af 8000 	nop.w
 8002af2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002af6:	4681      	mov	r9, r0
 8002af8:	d1d9      	bne.n	8002aae <_svfiprintf_r+0x166>
 8002afa:	89ab      	ldrh	r3, [r5, #12]
 8002afc:	065b      	lsls	r3, r3, #25
 8002afe:	f53f af38 	bmi.w	8002972 <_svfiprintf_r+0x2a>
 8002b02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b04:	b01d      	add	sp, #116	; 0x74
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0a:	ab03      	add	r3, sp, #12
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	462a      	mov	r2, r5
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <_svfiprintf_r+0x1e4>)
 8002b12:	a904      	add	r1, sp, #16
 8002b14:	4640      	mov	r0, r8
 8002b16:	f000 f881 	bl	8002c1c <_printf_i>
 8002b1a:	e7ea      	b.n	8002af2 <_svfiprintf_r+0x1aa>
 8002b1c:	08003136 	.word	0x08003136
 8002b20:	0800313c 	.word	0x0800313c
 8002b24:	08003140 	.word	0x08003140
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	08002891 	.word	0x08002891

08002b30 <_printf_common>:
 8002b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b34:	4691      	mov	r9, r2
 8002b36:	461f      	mov	r7, r3
 8002b38:	688a      	ldr	r2, [r1, #8]
 8002b3a:	690b      	ldr	r3, [r1, #16]
 8002b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b40:	4293      	cmp	r3, r2
 8002b42:	bfb8      	it	lt
 8002b44:	4613      	movlt	r3, r2
 8002b46:	f8c9 3000 	str.w	r3, [r9]
 8002b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b4e:	4606      	mov	r6, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	b112      	cbz	r2, 8002b5a <_printf_common+0x2a>
 8002b54:	3301      	adds	r3, #1
 8002b56:	f8c9 3000 	str.w	r3, [r9]
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	0699      	lsls	r1, r3, #26
 8002b5e:	bf42      	ittt	mi
 8002b60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b64:	3302      	addmi	r3, #2
 8002b66:	f8c9 3000 	strmi.w	r3, [r9]
 8002b6a:	6825      	ldr	r5, [r4, #0]
 8002b6c:	f015 0506 	ands.w	r5, r5, #6
 8002b70:	d107      	bne.n	8002b82 <_printf_common+0x52>
 8002b72:	f104 0a19 	add.w	sl, r4, #25
 8002b76:	68e3      	ldr	r3, [r4, #12]
 8002b78:	f8d9 2000 	ldr.w	r2, [r9]
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	429d      	cmp	r5, r3
 8002b80:	db29      	blt.n	8002bd6 <_printf_common+0xa6>
 8002b82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	3300      	adds	r3, #0
 8002b8a:	bf18      	it	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	0692      	lsls	r2, r2, #26
 8002b90:	d42e      	bmi.n	8002bf0 <_printf_common+0xc0>
 8002b92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b96:	4639      	mov	r1, r7
 8002b98:	4630      	mov	r0, r6
 8002b9a:	47c0      	blx	r8
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	d021      	beq.n	8002be4 <_printf_common+0xb4>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	68e5      	ldr	r5, [r4, #12]
 8002ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ba8:	f003 0306 	and.w	r3, r3, #6
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	bf08      	it	eq
 8002bb0:	1aad      	subeq	r5, r5, r2
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	6922      	ldr	r2, [r4, #16]
 8002bb6:	bf0c      	ite	eq
 8002bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bbc:	2500      	movne	r5, #0
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	bfc4      	itt	gt
 8002bc2:	1a9b      	subgt	r3, r3, r2
 8002bc4:	18ed      	addgt	r5, r5, r3
 8002bc6:	f04f 0900 	mov.w	r9, #0
 8002bca:	341a      	adds	r4, #26
 8002bcc:	454d      	cmp	r5, r9
 8002bce:	d11b      	bne.n	8002c08 <_printf_common+0xd8>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4652      	mov	r2, sl
 8002bda:	4639      	mov	r1, r7
 8002bdc:	4630      	mov	r0, r6
 8002bde:	47c0      	blx	r8
 8002be0:	3001      	adds	r0, #1
 8002be2:	d103      	bne.n	8002bec <_printf_common+0xbc>
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bec:	3501      	adds	r5, #1
 8002bee:	e7c2      	b.n	8002b76 <_printf_common+0x46>
 8002bf0:	18e1      	adds	r1, r4, r3
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	2030      	movs	r0, #48	; 0x30
 8002bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bfa:	4422      	add	r2, r4
 8002bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c04:	3302      	adds	r3, #2
 8002c06:	e7c4      	b.n	8002b92 <_printf_common+0x62>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	4622      	mov	r2, r4
 8002c0c:	4639      	mov	r1, r7
 8002c0e:	4630      	mov	r0, r6
 8002c10:	47c0      	blx	r8
 8002c12:	3001      	adds	r0, #1
 8002c14:	d0e6      	beq.n	8002be4 <_printf_common+0xb4>
 8002c16:	f109 0901 	add.w	r9, r9, #1
 8002c1a:	e7d7      	b.n	8002bcc <_printf_common+0x9c>

08002c1c <_printf_i>:
 8002c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c20:	4617      	mov	r7, r2
 8002c22:	7e0a      	ldrb	r2, [r1, #24]
 8002c24:	b085      	sub	sp, #20
 8002c26:	2a6e      	cmp	r2, #110	; 0x6e
 8002c28:	4698      	mov	r8, r3
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002c34:	f000 80bc 	beq.w	8002db0 <_printf_i+0x194>
 8002c38:	d81a      	bhi.n	8002c70 <_printf_i+0x54>
 8002c3a:	2a63      	cmp	r2, #99	; 0x63
 8002c3c:	d02e      	beq.n	8002c9c <_printf_i+0x80>
 8002c3e:	d80a      	bhi.n	8002c56 <_printf_i+0x3a>
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	f000 80c8 	beq.w	8002dd6 <_printf_i+0x1ba>
 8002c46:	2a58      	cmp	r2, #88	; 0x58
 8002c48:	f000 808a 	beq.w	8002d60 <_printf_i+0x144>
 8002c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002c54:	e02a      	b.n	8002cac <_printf_i+0x90>
 8002c56:	2a64      	cmp	r2, #100	; 0x64
 8002c58:	d001      	beq.n	8002c5e <_printf_i+0x42>
 8002c5a:	2a69      	cmp	r2, #105	; 0x69
 8002c5c:	d1f6      	bne.n	8002c4c <_printf_i+0x30>
 8002c5e:	6821      	ldr	r1, [r4, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c66:	d023      	beq.n	8002cb0 <_printf_i+0x94>
 8002c68:	1d11      	adds	r1, r2, #4
 8002c6a:	6019      	str	r1, [r3, #0]
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	e027      	b.n	8002cc0 <_printf_i+0xa4>
 8002c70:	2a73      	cmp	r2, #115	; 0x73
 8002c72:	f000 80b4 	beq.w	8002dde <_printf_i+0x1c2>
 8002c76:	d808      	bhi.n	8002c8a <_printf_i+0x6e>
 8002c78:	2a6f      	cmp	r2, #111	; 0x6f
 8002c7a:	d02a      	beq.n	8002cd2 <_printf_i+0xb6>
 8002c7c:	2a70      	cmp	r2, #112	; 0x70
 8002c7e:	d1e5      	bne.n	8002c4c <_printf_i+0x30>
 8002c80:	680a      	ldr	r2, [r1, #0]
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	600a      	str	r2, [r1, #0]
 8002c88:	e003      	b.n	8002c92 <_printf_i+0x76>
 8002c8a:	2a75      	cmp	r2, #117	; 0x75
 8002c8c:	d021      	beq.n	8002cd2 <_printf_i+0xb6>
 8002c8e:	2a78      	cmp	r2, #120	; 0x78
 8002c90:	d1dc      	bne.n	8002c4c <_printf_i+0x30>
 8002c92:	2278      	movs	r2, #120	; 0x78
 8002c94:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002c98:	496e      	ldr	r1, [pc, #440]	; (8002e54 <_printf_i+0x238>)
 8002c9a:	e064      	b.n	8002d66 <_printf_i+0x14a>
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002ca2:	1d11      	adds	r1, r2, #4
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0a3      	b.n	8002df8 <_printf_i+0x1dc>
 8002cb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002cb4:	f102 0104 	add.w	r1, r2, #4
 8002cb8:	6019      	str	r1, [r3, #0]
 8002cba:	d0d7      	beq.n	8002c6c <_printf_i+0x50>
 8002cbc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da03      	bge.n	8002ccc <_printf_i+0xb0>
 8002cc4:	222d      	movs	r2, #45	; 0x2d
 8002cc6:	425b      	negs	r3, r3
 8002cc8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ccc:	4962      	ldr	r1, [pc, #392]	; (8002e58 <_printf_i+0x23c>)
 8002cce:	220a      	movs	r2, #10
 8002cd0:	e017      	b.n	8002d02 <_printf_i+0xe6>
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cda:	d003      	beq.n	8002ce4 <_printf_i+0xc8>
 8002cdc:	1d08      	adds	r0, r1, #4
 8002cde:	6018      	str	r0, [r3, #0]
 8002ce0:	680b      	ldr	r3, [r1, #0]
 8002ce2:	e006      	b.n	8002cf2 <_printf_i+0xd6>
 8002ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ce8:	f101 0004 	add.w	r0, r1, #4
 8002cec:	6018      	str	r0, [r3, #0]
 8002cee:	d0f7      	beq.n	8002ce0 <_printf_i+0xc4>
 8002cf0:	880b      	ldrh	r3, [r1, #0]
 8002cf2:	4959      	ldr	r1, [pc, #356]	; (8002e58 <_printf_i+0x23c>)
 8002cf4:	2a6f      	cmp	r2, #111	; 0x6f
 8002cf6:	bf14      	ite	ne
 8002cf8:	220a      	movne	r2, #10
 8002cfa:	2208      	moveq	r2, #8
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002d02:	6865      	ldr	r5, [r4, #4]
 8002d04:	60a5      	str	r5, [r4, #8]
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	f2c0 809c 	blt.w	8002e44 <_printf_i+0x228>
 8002d0c:	6820      	ldr	r0, [r4, #0]
 8002d0e:	f020 0004 	bic.w	r0, r0, #4
 8002d12:	6020      	str	r0, [r4, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d13f      	bne.n	8002d98 <_printf_i+0x17c>
 8002d18:	2d00      	cmp	r5, #0
 8002d1a:	f040 8095 	bne.w	8002e48 <_printf_i+0x22c>
 8002d1e:	4675      	mov	r5, lr
 8002d20:	2a08      	cmp	r2, #8
 8002d22:	d10b      	bne.n	8002d3c <_printf_i+0x120>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	07da      	lsls	r2, r3, #31
 8002d28:	d508      	bpl.n	8002d3c <_printf_i+0x120>
 8002d2a:	6923      	ldr	r3, [r4, #16]
 8002d2c:	6862      	ldr	r2, [r4, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	bfde      	ittt	le
 8002d32:	2330      	movle	r3, #48	; 0x30
 8002d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d3c:	ebae 0305 	sub.w	r3, lr, r5
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	f8cd 8000 	str.w	r8, [sp]
 8002d46:	463b      	mov	r3, r7
 8002d48:	aa03      	add	r2, sp, #12
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f7ff feef 	bl	8002b30 <_printf_common>
 8002d52:	3001      	adds	r0, #1
 8002d54:	d155      	bne.n	8002e02 <_printf_i+0x1e6>
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5a:	b005      	add	sp, #20
 8002d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d60:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002d64:	493c      	ldr	r1, [pc, #240]	; (8002e58 <_printf_i+0x23c>)
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d6e:	f100 0504 	add.w	r5, r0, #4
 8002d72:	601d      	str	r5, [r3, #0]
 8002d74:	d001      	beq.n	8002d7a <_printf_i+0x15e>
 8002d76:	6803      	ldr	r3, [r0, #0]
 8002d78:	e002      	b.n	8002d80 <_printf_i+0x164>
 8002d7a:	0655      	lsls	r5, r2, #25
 8002d7c:	d5fb      	bpl.n	8002d76 <_printf_i+0x15a>
 8002d7e:	8803      	ldrh	r3, [r0, #0]
 8002d80:	07d0      	lsls	r0, r2, #31
 8002d82:	bf44      	itt	mi
 8002d84:	f042 0220 	orrmi.w	r2, r2, #32
 8002d88:	6022      	strmi	r2, [r4, #0]
 8002d8a:	b91b      	cbnz	r3, 8002d94 <_printf_i+0x178>
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	f022 0220 	bic.w	r2, r2, #32
 8002d92:	6022      	str	r2, [r4, #0]
 8002d94:	2210      	movs	r2, #16
 8002d96:	e7b1      	b.n	8002cfc <_printf_i+0xe0>
 8002d98:	4675      	mov	r5, lr
 8002d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d9e:	fb02 3310 	mls	r3, r2, r0, r3
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002da8:	4603      	mov	r3, r0
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d1f5      	bne.n	8002d9a <_printf_i+0x17e>
 8002dae:	e7b7      	b.n	8002d20 <_printf_i+0x104>
 8002db0:	6808      	ldr	r0, [r1, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	6949      	ldr	r1, [r1, #20]
 8002db6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002dba:	d004      	beq.n	8002dc6 <_printf_i+0x1aa>
 8002dbc:	1d10      	adds	r0, r2, #4
 8002dbe:	6018      	str	r0, [r3, #0]
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	6019      	str	r1, [r3, #0]
 8002dc4:	e007      	b.n	8002dd6 <_printf_i+0x1ba>
 8002dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dca:	f102 0004 	add.w	r0, r2, #4
 8002dce:	6018      	str	r0, [r3, #0]
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	d0f6      	beq.n	8002dc2 <_printf_i+0x1a6>
 8002dd4:	8019      	strh	r1, [r3, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6123      	str	r3, [r4, #16]
 8002dda:	4675      	mov	r5, lr
 8002ddc:	e7b1      	b.n	8002d42 <_printf_i+0x126>
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	1d11      	adds	r1, r2, #4
 8002de2:	6019      	str	r1, [r3, #0]
 8002de4:	6815      	ldr	r5, [r2, #0]
 8002de6:	6862      	ldr	r2, [r4, #4]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4628      	mov	r0, r5
 8002dec:	f7fd f9f8 	bl	80001e0 <memchr>
 8002df0:	b108      	cbz	r0, 8002df6 <_printf_i+0x1da>
 8002df2:	1b40      	subs	r0, r0, r5
 8002df4:	6060      	str	r0, [r4, #4]
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e00:	e79f      	b.n	8002d42 <_printf_i+0x126>
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	462a      	mov	r2, r5
 8002e06:	4639      	mov	r1, r7
 8002e08:	4630      	mov	r0, r6
 8002e0a:	47c0      	blx	r8
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d0a2      	beq.n	8002d56 <_printf_i+0x13a>
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	079b      	lsls	r3, r3, #30
 8002e14:	d507      	bpl.n	8002e26 <_printf_i+0x20a>
 8002e16:	2500      	movs	r5, #0
 8002e18:	f104 0919 	add.w	r9, r4, #25
 8002e1c:	68e3      	ldr	r3, [r4, #12]
 8002e1e:	9a03      	ldr	r2, [sp, #12]
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	429d      	cmp	r5, r3
 8002e24:	db05      	blt.n	8002e32 <_printf_i+0x216>
 8002e26:	68e0      	ldr	r0, [r4, #12]
 8002e28:	9b03      	ldr	r3, [sp, #12]
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	bfb8      	it	lt
 8002e2e:	4618      	movlt	r0, r3
 8002e30:	e793      	b.n	8002d5a <_printf_i+0x13e>
 8002e32:	2301      	movs	r3, #1
 8002e34:	464a      	mov	r2, r9
 8002e36:	4639      	mov	r1, r7
 8002e38:	4630      	mov	r0, r6
 8002e3a:	47c0      	blx	r8
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d08a      	beq.n	8002d56 <_printf_i+0x13a>
 8002e40:	3501      	adds	r5, #1
 8002e42:	e7eb      	b.n	8002e1c <_printf_i+0x200>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1a7      	bne.n	8002d98 <_printf_i+0x17c>
 8002e48:	780b      	ldrb	r3, [r1, #0]
 8002e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e52:	e765      	b.n	8002d20 <_printf_i+0x104>
 8002e54:	08003158 	.word	0x08003158
 8002e58:	08003147 	.word	0x08003147

08002e5c <memcpy>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	1e43      	subs	r3, r0, #1
 8002e60:	440a      	add	r2, r1
 8002e62:	4291      	cmp	r1, r2
 8002e64:	d100      	bne.n	8002e68 <memcpy+0xc>
 8002e66:	bd10      	pop	{r4, pc}
 8002e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e70:	e7f7      	b.n	8002e62 <memcpy+0x6>

08002e72 <memmove>:
 8002e72:	4288      	cmp	r0, r1
 8002e74:	b510      	push	{r4, lr}
 8002e76:	eb01 0302 	add.w	r3, r1, r2
 8002e7a:	d803      	bhi.n	8002e84 <memmove+0x12>
 8002e7c:	1e42      	subs	r2, r0, #1
 8002e7e:	4299      	cmp	r1, r3
 8002e80:	d10c      	bne.n	8002e9c <memmove+0x2a>
 8002e82:	bd10      	pop	{r4, pc}
 8002e84:	4298      	cmp	r0, r3
 8002e86:	d2f9      	bcs.n	8002e7c <memmove+0xa>
 8002e88:	1881      	adds	r1, r0, r2
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	42d3      	cmn	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memmove+0x20>
 8002e90:	bd10      	pop	{r4, pc}
 8002e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e9a:	e7f7      	b.n	8002e8c <memmove+0x1a>
 8002e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ea0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ea4:	e7eb      	b.n	8002e7e <memmove+0xc>
	...

08002ea8 <_free_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	4605      	mov	r5, r0
 8002eac:	2900      	cmp	r1, #0
 8002eae:	d045      	beq.n	8002f3c <_free_r+0x94>
 8002eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb4:	1f0c      	subs	r4, r1, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bfb8      	it	lt
 8002eba:	18e4      	addlt	r4, r4, r3
 8002ebc:	f000 f8d6 	bl	800306c <__malloc_lock>
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <_free_r+0x98>)
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	b933      	cbnz	r3, 8002ed6 <_free_r+0x2e>
 8002ec8:	6063      	str	r3, [r4, #4]
 8002eca:	6014      	str	r4, [r2, #0]
 8002ecc:	4628      	mov	r0, r5
 8002ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ed2:	f000 b8cc 	b.w	800306e <__malloc_unlock>
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	d90c      	bls.n	8002ef4 <_free_r+0x4c>
 8002eda:	6821      	ldr	r1, [r4, #0]
 8002edc:	1862      	adds	r2, r4, r1
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf04      	itt	eq
 8002ee2:	681a      	ldreq	r2, [r3, #0]
 8002ee4:	685b      	ldreq	r3, [r3, #4]
 8002ee6:	6063      	str	r3, [r4, #4]
 8002ee8:	bf04      	itt	eq
 8002eea:	1852      	addeq	r2, r2, r1
 8002eec:	6022      	streq	r2, [r4, #0]
 8002eee:	6004      	str	r4, [r0, #0]
 8002ef0:	e7ec      	b.n	8002ecc <_free_r+0x24>
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	b10a      	cbz	r2, 8002efc <_free_r+0x54>
 8002ef8:	42a2      	cmp	r2, r4
 8002efa:	d9fa      	bls.n	8002ef2 <_free_r+0x4a>
 8002efc:	6819      	ldr	r1, [r3, #0]
 8002efe:	1858      	adds	r0, r3, r1
 8002f00:	42a0      	cmp	r0, r4
 8002f02:	d10b      	bne.n	8002f1c <_free_r+0x74>
 8002f04:	6820      	ldr	r0, [r4, #0]
 8002f06:	4401      	add	r1, r0
 8002f08:	1858      	adds	r0, r3, r1
 8002f0a:	4282      	cmp	r2, r0
 8002f0c:	6019      	str	r1, [r3, #0]
 8002f0e:	d1dd      	bne.n	8002ecc <_free_r+0x24>
 8002f10:	6810      	ldr	r0, [r2, #0]
 8002f12:	6852      	ldr	r2, [r2, #4]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	4401      	add	r1, r0
 8002f18:	6019      	str	r1, [r3, #0]
 8002f1a:	e7d7      	b.n	8002ecc <_free_r+0x24>
 8002f1c:	d902      	bls.n	8002f24 <_free_r+0x7c>
 8002f1e:	230c      	movs	r3, #12
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	e7d3      	b.n	8002ecc <_free_r+0x24>
 8002f24:	6820      	ldr	r0, [r4, #0]
 8002f26:	1821      	adds	r1, r4, r0
 8002f28:	428a      	cmp	r2, r1
 8002f2a:	bf04      	itt	eq
 8002f2c:	6811      	ldreq	r1, [r2, #0]
 8002f2e:	6852      	ldreq	r2, [r2, #4]
 8002f30:	6062      	str	r2, [r4, #4]
 8002f32:	bf04      	itt	eq
 8002f34:	1809      	addeq	r1, r1, r0
 8002f36:	6021      	streq	r1, [r4, #0]
 8002f38:	605c      	str	r4, [r3, #4]
 8002f3a:	e7c7      	b.n	8002ecc <_free_r+0x24>
 8002f3c:	bd38      	pop	{r3, r4, r5, pc}
 8002f3e:	bf00      	nop
 8002f40:	200000a4 	.word	0x200000a4

08002f44 <_malloc_r>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	1ccd      	adds	r5, r1, #3
 8002f48:	f025 0503 	bic.w	r5, r5, #3
 8002f4c:	3508      	adds	r5, #8
 8002f4e:	2d0c      	cmp	r5, #12
 8002f50:	bf38      	it	cc
 8002f52:	250c      	movcc	r5, #12
 8002f54:	2d00      	cmp	r5, #0
 8002f56:	4606      	mov	r6, r0
 8002f58:	db01      	blt.n	8002f5e <_malloc_r+0x1a>
 8002f5a:	42a9      	cmp	r1, r5
 8002f5c:	d903      	bls.n	8002f66 <_malloc_r+0x22>
 8002f5e:	230c      	movs	r3, #12
 8002f60:	6033      	str	r3, [r6, #0]
 8002f62:	2000      	movs	r0, #0
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	f000 f881 	bl	800306c <__malloc_lock>
 8002f6a:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <_malloc_r+0xb4>)
 8002f6c:	6814      	ldr	r4, [r2, #0]
 8002f6e:	4621      	mov	r1, r4
 8002f70:	b991      	cbnz	r1, 8002f98 <_malloc_r+0x54>
 8002f72:	4c22      	ldr	r4, [pc, #136]	; (8002ffc <_malloc_r+0xb8>)
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	b91b      	cbnz	r3, 8002f80 <_malloc_r+0x3c>
 8002f78:	4630      	mov	r0, r6
 8002f7a:	f000 f867 	bl	800304c <_sbrk_r>
 8002f7e:	6020      	str	r0, [r4, #0]
 8002f80:	4629      	mov	r1, r5
 8002f82:	4630      	mov	r0, r6
 8002f84:	f000 f862 	bl	800304c <_sbrk_r>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d126      	bne.n	8002fda <_malloc_r+0x96>
 8002f8c:	230c      	movs	r3, #12
 8002f8e:	6033      	str	r3, [r6, #0]
 8002f90:	4630      	mov	r0, r6
 8002f92:	f000 f86c 	bl	800306e <__malloc_unlock>
 8002f96:	e7e4      	b.n	8002f62 <_malloc_r+0x1e>
 8002f98:	680b      	ldr	r3, [r1, #0]
 8002f9a:	1b5b      	subs	r3, r3, r5
 8002f9c:	d41a      	bmi.n	8002fd4 <_malloc_r+0x90>
 8002f9e:	2b0b      	cmp	r3, #11
 8002fa0:	d90f      	bls.n	8002fc2 <_malloc_r+0x7e>
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	50cd      	str	r5, [r1, r3]
 8002fa6:	18cc      	adds	r4, r1, r3
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f000 f860 	bl	800306e <__malloc_unlock>
 8002fae:	f104 000b 	add.w	r0, r4, #11
 8002fb2:	1d23      	adds	r3, r4, #4
 8002fb4:	f020 0007 	bic.w	r0, r0, #7
 8002fb8:	1ac3      	subs	r3, r0, r3
 8002fba:	d01b      	beq.n	8002ff4 <_malloc_r+0xb0>
 8002fbc:	425a      	negs	r2, r3
 8002fbe:	50e2      	str	r2, [r4, r3]
 8002fc0:	bd70      	pop	{r4, r5, r6, pc}
 8002fc2:	428c      	cmp	r4, r1
 8002fc4:	bf0d      	iteet	eq
 8002fc6:	6863      	ldreq	r3, [r4, #4]
 8002fc8:	684b      	ldrne	r3, [r1, #4]
 8002fca:	6063      	strne	r3, [r4, #4]
 8002fcc:	6013      	streq	r3, [r2, #0]
 8002fce:	bf18      	it	ne
 8002fd0:	460c      	movne	r4, r1
 8002fd2:	e7e9      	b.n	8002fa8 <_malloc_r+0x64>
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	6849      	ldr	r1, [r1, #4]
 8002fd8:	e7ca      	b.n	8002f70 <_malloc_r+0x2c>
 8002fda:	1cc4      	adds	r4, r0, #3
 8002fdc:	f024 0403 	bic.w	r4, r4, #3
 8002fe0:	42a0      	cmp	r0, r4
 8002fe2:	d005      	beq.n	8002ff0 <_malloc_r+0xac>
 8002fe4:	1a21      	subs	r1, r4, r0
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f000 f830 	bl	800304c <_sbrk_r>
 8002fec:	3001      	adds	r0, #1
 8002fee:	d0cd      	beq.n	8002f8c <_malloc_r+0x48>
 8002ff0:	6025      	str	r5, [r4, #0]
 8002ff2:	e7d9      	b.n	8002fa8 <_malloc_r+0x64>
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200000a4 	.word	0x200000a4
 8002ffc:	200000a8 	.word	0x200000a8

08003000 <_realloc_r>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	4607      	mov	r7, r0
 8003004:	4614      	mov	r4, r2
 8003006:	460e      	mov	r6, r1
 8003008:	b921      	cbnz	r1, 8003014 <_realloc_r+0x14>
 800300a:	4611      	mov	r1, r2
 800300c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003010:	f7ff bf98 	b.w	8002f44 <_malloc_r>
 8003014:	b922      	cbnz	r2, 8003020 <_realloc_r+0x20>
 8003016:	f7ff ff47 	bl	8002ea8 <_free_r>
 800301a:	4625      	mov	r5, r4
 800301c:	4628      	mov	r0, r5
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003020:	f000 f826 	bl	8003070 <_malloc_usable_size_r>
 8003024:	4284      	cmp	r4, r0
 8003026:	d90f      	bls.n	8003048 <_realloc_r+0x48>
 8003028:	4621      	mov	r1, r4
 800302a:	4638      	mov	r0, r7
 800302c:	f7ff ff8a 	bl	8002f44 <_malloc_r>
 8003030:	4605      	mov	r5, r0
 8003032:	2800      	cmp	r0, #0
 8003034:	d0f2      	beq.n	800301c <_realloc_r+0x1c>
 8003036:	4631      	mov	r1, r6
 8003038:	4622      	mov	r2, r4
 800303a:	f7ff ff0f 	bl	8002e5c <memcpy>
 800303e:	4631      	mov	r1, r6
 8003040:	4638      	mov	r0, r7
 8003042:	f7ff ff31 	bl	8002ea8 <_free_r>
 8003046:	e7e9      	b.n	800301c <_realloc_r+0x1c>
 8003048:	4635      	mov	r5, r6
 800304a:	e7e7      	b.n	800301c <_realloc_r+0x1c>

0800304c <_sbrk_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4c06      	ldr	r4, [pc, #24]	; (8003068 <_sbrk_r+0x1c>)
 8003050:	2300      	movs	r3, #0
 8003052:	4605      	mov	r5, r0
 8003054:	4608      	mov	r0, r1
 8003056:	6023      	str	r3, [r4, #0]
 8003058:	f7ff fb5a 	bl	8002710 <_sbrk>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_sbrk_r+0x1a>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	b103      	cbz	r3, 8003066 <_sbrk_r+0x1a>
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	2000019c 	.word	0x2000019c

0800306c <__malloc_lock>:
 800306c:	4770      	bx	lr

0800306e <__malloc_unlock>:
 800306e:	4770      	bx	lr

08003070 <_malloc_usable_size_r>:
 8003070:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003074:	2800      	cmp	r0, #0
 8003076:	f1a0 0004 	sub.w	r0, r0, #4
 800307a:	bfbc      	itt	lt
 800307c:	580b      	ldrlt	r3, [r1, r0]
 800307e:	18c0      	addlt	r0, r0, r3
 8003080:	4770      	bx	lr
	...

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
